package com.abnote.planilhas.utils;

import org.apache.poi.ss.usermodel.*;
import java.util.HashMap;
import java.util.Map;

public class ManipuladorPlanilha {
	private Sheet sheet;

	// Mapa para armazenar dados e estilos temporariamente
	private Map<Integer, CellData> colunaTemporaria = new HashMap<>();

	public ManipuladorPlanilha(Sheet sheet) {
		this.sheet = sheet;
	}

	public ManipuladorPlanilha moverColuna(String posicaoOrigem, String posicaoDestino) {
		int colunaOrigem = PosicaoConverter.converterColuna(posicaoOrigem);
		int colunaDestino = PosicaoConverter.converterColuna(posicaoDestino);

		// Verifica se as colunas são iguais
		if (colunaOrigem == colunaDestino) {
			return this;
		}

		// Copia dados e estilos da coluna de origem
		copiarColuna(colunaOrigem);

		if (colunaOrigem < colunaDestino) {
			// Move colunas intermediárias para a esquerda
			shiftColumnsLeft(colunaOrigem + 1, colunaDestino);
		} else {
			// Move colunas intermediárias para a direita
			shiftColumnsRight(colunaDestino, colunaOrigem - 1);
		}

		// Cola a coluna temporária na nova posição
		colarColunaTemporaria(colunaDestino);

		// Limpa a coluna temporária
		colunaTemporaria.clear();

		return this;
	}

	private void copiarColuna(int colunaOrigem) {
		int lastRowNum = sheet.getLastRowNum();
		for (int i = 0; i <= lastRowNum; i++) {
			Row row = sheet.getRow(i);
			if (row != null) {
				Cell cell = row.getCell(colunaOrigem);
				if (cell != null) {
					// Copia o valor e estilo da célula
					CellData cellData = new CellData();
					copiarValorParaCellData(cell, cellData);
					copiarEstiloParaCellData(cell, cellData);
					colunaTemporaria.put(i, cellData);
					// Apaga a célula original
					row.removeCell(cell);
				}
			}
		}
	}

	private void copiarValorParaCellData(Cell cell, CellData cellData) {
		CellType cellType = cell.getCellTypeEnum();
		cellData.cellType = cellType;

		switch (cellType) {
		case STRING:
			cellData.stringValue = cell.getStringCellValue();
			break;
		case NUMERIC:
			cellData.numericValue = cell.getNumericCellValue();
			break;
		case BOOLEAN:
			cellData.booleanValue = cell.getBooleanCellValue();
			break;
		case FORMULA:
			cellData.formulaValue = cell.getCellFormula();
			break;
		case ERROR:
			cellData.errorValue = cell.getErrorCellValue();
			break;
		case BLANK:
			// Nada a fazer para células em branco
			break;
		default:
			// Outros tipos de célula, se necessário
			break;
		}
	}

	private void copiarEstiloParaCellData(Cell cell, CellData cellData) {
		cellData.cellStyle = cell.getCellStyle();
	}

	private void colarColunaTemporaria(int colunaDestino) {
		for (Map.Entry<Integer, CellData> entry : colunaTemporaria.entrySet()) {
			int rowNum = entry.getKey();
			CellData cellData = entry.getValue();

			Row row = sheet.getRow(rowNum);
			if (row == null) {
				row = sheet.createRow(rowNum);
			}
			Cell cell = row.createCell(colunaDestino);
			colarValorDeCellData(cell, cellData);
			cell.setCellStyle(cellData.cellStyle);
		}
	}

	private void colarValorDeCellData(Cell cell, CellData cellData) {
		cell.setCellType(cellData.cellType);

		switch (cellData.cellType) {
		case STRING:
			cell.setCellValue(cellData.stringValue);
			break;
		case NUMERIC:
			cell.setCellValue(cellData.numericValue);
			break;
		case BOOLEAN:
			cell.setCellValue(cellData.booleanValue);
			break;
		case FORMULA:
			cell.setCellFormula(cellData.formulaValue);
			break;
		case ERROR:
			cell.setCellErrorValue(cellData.errorValue);
			break;
		case BLANK:
			// Deixar a célula em branco
			break;
		default:
			// Outros tipos de célula, se necessário
			break;
		}
	}

	// Métodos para deslocar colunas manualmente

	private void shiftColumnsLeft(int startColumn, int endColumn) {
		int lastRowNum = sheet.getLastRowNum();
		for (int col = startColumn; col <= endColumn; col++) {
			int targetCol = col - 1;
			for (int rowNum = 0; rowNum <= lastRowNum; rowNum++) {
				Row row = sheet.getRow(rowNum);
				if (row != null) {
					Cell sourceCell = row.getCell(col);
					if (sourceCell != null) {
						Cell targetCell = row.createCell(targetCol);
						copiarValorEntreCelulas(sourceCell, targetCell);
						copiarEstiloEntreCelulas(sourceCell, targetCell);
						row.removeCell(sourceCell);
					} else {
						// Remove a célula de destino, se existir
						Cell targetCell = row.getCell(targetCol);
						if (targetCell != null) {
							row.removeCell(targetCell);
						}
					}
				}
			}
		}
	}

	private void shiftColumnsRight(int startColumn, int endColumn) {
		int lastRowNum = sheet.getLastRowNum();
		for (int col = endColumn; col >= startColumn; col--) {
			int targetCol = col + 1;
			for (int rowNum = 0; rowNum <= lastRowNum; rowNum++) {
				Row row = sheet.getRow(rowNum);
				if (row != null) {
					Cell sourceCell = row.getCell(col);
					if (sourceCell != null) {
						Cell targetCell = row.createCell(targetCol);
						copiarValorEntreCelulas(sourceCell, targetCell);
						copiarEstiloEntreCelulas(sourceCell, targetCell);
						row.removeCell(sourceCell);
					} else {
						// Remove a célula de destino, se existir
						Cell targetCell = row.getCell(targetCol);
						if (targetCell != null) {
							row.removeCell(targetCell);
						}
					}
				}
			}
		}
	}

	// Novos métodos para copiar valores e estilos entre células

	private void copiarValorEntreCelulas(Cell sourceCell, Cell targetCell) {
		CellType cellType = sourceCell.getCellTypeEnum();
		targetCell.setCellType(cellType);

		switch (cellType) {
		case STRING:
			targetCell.setCellValue(sourceCell.getStringCellValue());
			break;
		case NUMERIC:
			targetCell.setCellValue(sourceCell.getNumericCellValue());
			break;
		case BOOLEAN:
			targetCell.setCellValue(sourceCell.getBooleanCellValue());
			break;
		case FORMULA:
			targetCell.setCellFormula(sourceCell.getCellFormula());
			break;
		case ERROR:
			targetCell.setCellErrorValue(sourceCell.getErrorCellValue());
			break;
		case BLANK:
			// Deixar a célula em branco
			break;
		default:
			// Outros tipos de célula, se necessário
			break;
		}
	}

	private void copiarEstiloEntreCelulas(Cell sourceCell, Cell targetCell) {
		targetCell.setCellStyle(sourceCell.getCellStyle());
	}

	// Classe auxiliar para armazenar os dados da célula
	private static class CellData {
		String stringValue;
		String formulaValue;
		double numericValue;
		boolean booleanValue;
		byte errorValue;
		CellType cellType;
		CellStyle cellStyle;
	}
}
