package com.abnote.planilhas.estilos;

import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.*;

import com.abnote.planilhas.estilos.estilos.BoldStyle;
import com.abnote.planilhas.estilos.estilos.BorderStyle;
import com.abnote.planilhas.estilos.estilos.CenterStyle;

public class EstiloCelula {
    protected final Workbook workbook;
    protected final Sheet sheet;
    protected final int rowIndex;
    protected final int columnIndex;

    // Campos para intervalos
    protected final int startRowIndex;
    protected final int startColumnIndex;
    protected final int endRowIndex;
    protected final int endColumnIndex;
    protected final boolean isRange;

    // Índice da linha a ser estilizada (-1 se for geral)
    protected final Map<String, CellStyle> styleCache = new HashMap<>();

    // Classes de estilo específicas
    private final BoldStyle boldStyle;
    private final BorderStyle bordersStyle;
    private final CenterStyle centeredStyle;

    // Construtores
    public EstiloCelula(Workbook workbook, Sheet sheet) {
        this(workbook, sheet, -1, -1, -1, -1);
    }

    public EstiloCelula(Workbook workbook, Sheet sheet, int rowIndex, int columnIndex) {
        this(workbook, sheet, rowIndex, columnIndex, -1, -1);
    }

    public EstiloCelula(Workbook workbook, Sheet sheet, int startRowIndex, int startColumnIndex, int endRowIndex,
            int endColumnIndex) {
        this.workbook = workbook;
        this.sheet = sheet;
        this.rowIndex = startRowIndex;
        this.columnIndex = startColumnIndex;
        this.startRowIndex = startRowIndex;
        this.startColumnIndex = startColumnIndex;
        this.endRowIndex = endRowIndex;
        this.endColumnIndex = endColumnIndex;
        this.isRange = (endRowIndex != -1 && endColumnIndex != -1);

        // Inicializa as classes de estilo específicas
        this.boldStyle = new BoldStyle(workbook, sheet, this);
        this.bordersStyle = new BorderStyle(workbook, sheet, this);
        this.centeredStyle = new CenterStyle(workbook, sheet, this);

        // Inicializações genéricas
        initializeGenericStyles();
    }

    private void initializeGenericStyles() {
        // Inicializa estilos genéricos se necessário
    }

    // Métodos genéricos
    public CellStyle createCombinedStyle(CellStyle originalStyle, boolean addBold, boolean addCentered) {
        CellStyle newStyle = workbook.createCellStyle();
        newStyle.cloneStyleFrom(originalStyle);

        if (addBold) {
            boldStyle.applyBold(newStyle);
        }

        if (addCentered) {
            centeredStyle.applyCentered(newStyle);
        }

        return newStyle;
    }

    public EstiloCelula redimensionarColunas() {
        int maxColumns = getMaxNumberOfColumns();
        for (int i = 0; i < maxColumns; i++) {
            sheet.autoSizeColumn(i);
        }
        return this;
    }

    private int getMaxNumberOfColumns() {
        int maxColumns = 0;
        for (Row row : sheet) {
            if (row.getLastCellNum() > maxColumns) {
                maxColumns = row.getLastCellNum();
            }
        }
        return maxColumns;
    }

    public EstiloCelula removerLinhasDeGrade() {
        sheet.setDisplayGridlines(false);
        return this;
    }

    protected int[] converterPosicao(String posicao) {
        int coluna = 0;
        int linha = 0;
        for (int i = 0; i < posicao.length(); i++) {
            char ch = posicao.charAt(i);
            if (Character.isLetter(ch)) {
                coluna = coluna * 26 + (Character.toUpperCase(ch) - 'A' + 1);
            } else if (Character.isDigit(ch)) {
                linha = Integer.parseInt(posicao.substring(i)) - 1;
                break;
            }
        }
        return new int[] { coluna - 1, linha };
    }

    // Delegação para classes de estilo específicas
    public EstiloCelula aplicarBold() {
        boldStyle.aplicarBold();
        redimensionarColunas();
        return this;
    }

    public EstiloCelula todasAsBordasEmTudo() {
        bordersStyle.todasAsBordasEmTudo();
        return this;
    }

    public EstiloCelula aplicarBordasNaCelula(String posicao) {
        bordersStyle.aplicarBordasNaCelula(posicao);
        return this;
    }

    public EstiloCelula aplicarTodasAsBordasDeAte(String posicaoInicial, String posicaoFinal) {
        bordersStyle.aplicarTodasAsBordasDeAte(posicaoInicial, posicaoFinal);
        return this;
    }

    public EstiloCelula bordasEspessas(String posicaoInicial, String posicaoFinal) {
        bordersStyle.bordasEspessas(posicaoInicial, posicaoFinal);
        return this;
    }

    public EstiloCelula bordasEspessasComBordasInternas(String posicaoInicial, String posicaoFinal) {
        bordersStyle.bordasEspessasComBordasInternas(posicaoInicial, posicaoFinal);
        return this;
    }

    public EstiloCelula centralizarTudo() {
        centeredStyle.centralizarTudo();
        redimensionarColunas();
        return this;
    }

    // Outros métodos genéricos podem ser adicionados aqui
}
