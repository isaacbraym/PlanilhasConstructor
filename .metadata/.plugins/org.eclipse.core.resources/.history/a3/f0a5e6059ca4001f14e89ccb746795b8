package com.abnote.planilhas.estilos.estilos;

import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

public class BorderStyle {
    private final Workbook workbook;
    private final StyleCache styleCache;

    public BorderStyle(Workbook workbook) {
        this.workbook = workbook;
        this.styleCache = new StyleCache();
    }

    /**
     * Aplica bordas finas a todas as células com dados no intervalo ou na planilha inteira.
     *
     * @param sheet     A folha de cálculo onde as células estão localizadas.
     * @param isRange   Indica se o estilo deve ser aplicado a um intervalo específico.
     * @param startRow  Índice da linha inicial do intervalo.
     * @param startCol  Índice da coluna inicial do intervalo.
     * @param endRow    Índice da linha final do intervalo.
     * @param endCol    Índice da coluna final do intervalo.
     */
    public void applyThinBorders(Sheet sheet, boolean isRange, int startRow, int startCol, int endRow, int endCol) {
        if (isRange) {
            for (int rowIdx = startRow; rowIdx <= endRow; rowIdx++) {
                Row row = sheet.getRow(rowIdx);
                if (row == null) continue;
                for (int colIdx = startCol; colIdx <= endCol; colIdx++) {
                    Cell cell = row.getCell(colIdx);
                    if (cell == null || cell.getCellType() == CellType.BLANK) continue;

                    CellStyle originalStyle = cell.getCellStyle();
                    boolean hasThickBorder = hasThickBorder(originalStyle);

                    if (hasThickBorder) continue;

                    String cacheKey = "borders_" + originalStyle.hashCode();
                    CellStyle borderedStyle = styleCache.getStyle(cacheKey);

                    if (borderedStyle == null) {
                        borderedStyle = workbook.createCellStyle();
                        borderedStyle.cloneStyleFrom(originalStyle);
                        borderedStyle.setBorderTop(BorderStyle.THIN);
                        borderedStyle.setBorderBottom(BorderStyle.THIN);
                        borderedStyle.setBorderLeft(BorderStyle.THIN);
                        borderedStyle.setBorderRight(BorderStyle.THIN);
                        styleCache.putStyle(cacheKey, borderedStyle);
                    }

                    cell.setCellStyle(borderedStyle);
                }
            }
        } else {
            for (Row row : sheet) {
                if (row == null) continue;
                for (Cell cell : row) {
                    if (cell == null || cell.getCellType() == CellType.BLANK) continue;

                    CellStyle originalStyle = cell.getCellStyle();
                    boolean hasThickBorder = hasThickBorder(originalStyle);

                    if (hasThickBorder) continue;

                    String cacheKey = "borders_" + originalStyle.hashCode();
                    CellStyle borderedStyle = styleCache.getStyle(cacheKey);

                    if (borderedStyle == null) {
                        borderedStyle = workbook.createCellStyle();
                        borderedStyle.cloneStyleFrom(originalStyle);
                        borderedStyle.setBorderTop(BorderStyle.THIN);
                        borderedStyle.setBorderBottom(BorderStyle.THIN);
                        borderedStyle.setBorderLeft(BorderStyle.THIN);
                        borderedStyle.setBorderRight(BorderStyle.THIN);
                        styleCache.putStyle(cacheKey, borderedStyle);
                    }

                    cell.setCellStyle(borderedStyle);
                }
            }
        }
    }

    /**
     * Aplica bordas espessas nas bordas externas de um intervalo de células.
     *
     * @param sheet           A folha de cálculo onde as células estão localizadas.
     * @param posicaoInicial  Posição inicial do intervalo no formato "A1".
     * @param posicaoFinal    Posição final do intervalo no formato "D10".
     */
    public void applyThickBorders(Sheet sheet, String posicaoInicial, String posicaoFinal) {
        int[] inicio = PosicaoConverter.converterPosicao(posicaoInicial);
        int[] fim = PosicaoConverter.converterPosicao(posicaoFinal);

        for (int rowIdx = inicio[1]; rowIdx <= fim[1]; rowIdx++) {
            Row row = sheet.getRow(rowIdx);
            if (row == null) {
                row = sheet.createRow(rowIdx);
            }
            for (int colIdx = inicio[0]; colIdx <= fim[0]; colIdx++) {
                Cell cell = row.getCell(colIdx);
                if (cell == null) {
                    cell = row.createCell(colIdx);
                }

                CellStyle originalStyle = cell.getCellStyle();
                String cacheKey = "thickBorders_" + originalStyle.hashCode() + "_r" + rowIdx + "_c" + colIdx;
                CellStyle thickBorderStyle = styleCache.getStyle(cacheKey);

                if (thickBorderStyle == null) {
                    thickBorderStyle = workbook.createCellStyle();
                    thickBorderStyle.cloneStyleFrom(originalStyle);

                    if (rowIdx == inicio[1]) {
                        thickBorderStyle.setBorderTop(BorderStyle.THICK);
                    }
                    if (rowIdx == fim[1]) {
                        thickBorderStyle.setBorderBottom(BorderStyle.THICK);
                    }
                    if (colIdx == inicio[0]) {
                        thickBorderStyle.setBorderLeft(BorderStyle.THICK);
                    }
                    if (colIdx == fim[0]) {
                        thickBorderStyle.setBorderRight(BorderStyle.THICK);
                    }

                    styleCache.putStyle(cacheKey, thickBorderStyle);
                }

                cell.setCellStyle(thickBorderStyle);
            }
        }
    }

    /**
     * Aplica bordas espessas nas bordas externas e bordas finas nas internas de um intervalo de células.
     *
     * @param sheet           A folha de cálculo onde as células estão localizadas.
     * @param posicaoInicial  Posição inicial do intervalo no formato "A1".
     * @param posicaoFinal    Posição final do intervalo no formato "D10".
     */
    public void applyThickAndThinBorders(Sheet sheet, String posicaoInicial, String posicaoFinal) {
        int[] inicio = PosicaoConverter.converterPosicao(posicaoInicial);
        int[] fim = PosicaoConverter.converterPosicao(posicaoFinal);

        for (int rowIdx = inicio[1]; rowIdx <= fim[1]; rowIdx++) {
            Row row = sheet.getRow(rowIdx);
            if (row == null) {
                row = sheet.createRow(rowIdx);
            }
            for (int colIdx = inicio[0]; colIdx <= fim[0]; colIdx++) {
                Cell cell = row.getCell(colIdx);
                if (cell == null) {
                    cell = row.createCell(colIdx);
                }

                CellStyle originalStyle = cell.getCellStyle();
                String cacheKey = "thickInternalBorders_" + originalStyle.hashCode() + "_r" + rowIdx + "_c" + colIdx;
                CellStyle newStyle = styleCache.getStyle(cacheKey);

                if (newStyle == null) {
                    newStyle = workbook.createCellStyle();
                    newStyle.cloneStyleFrom(originalStyle);

                    newStyle.setBorderTop(BorderStyle.THIN);
                    newStyle.setBorderBottom(BorderStyle.THIN);
                    newStyle.setBorderLeft(BorderStyle.THIN);
                    newStyle.setBorderRight(BorderStyle.THIN);

                    if (rowIdx == inicio[1]) {
                        newStyle.setBorderTop(BorderStyle.THICK);
                    }
                    if (rowIdx == fim[1]) {
                        newStyle.setBorderBottom(BorderStyle.THICK);
                    }
                    if (colIdx == inicio[0]) {
                        newStyle.setBorderLeft(BorderStyle.THICK);
                    }
                    if (colIdx == fim[0]) {
                        newStyle.setBorderRight(BorderStyle.THICK);
                    }

                    styleCache.putStyle(cacheKey, newStyle);
                }

                cell.setCellStyle(newStyle);
            }
        }
    }

    /**
     * Aplica bordas finas a uma célula específica.
     *
     * @param sheet     A folha de cálculo onde a célula está localizada.
     * @param posicao   Posição da célula no formato "A1".
     */
    public void applyThinBordersToCell(Sheet sheet, String posicao) {
        int[] posicaoIndices = PosicaoConverter.converterPosicao(posicao);
        int coluna = posicaoIndices[0];
        int linha = posicaoIndices[1];
        Row row = sheet.getRow(linha);
        if (row == null) {
            row = sheet.createRow(linha);
        }
        Cell cell = row.getCell(coluna);
        if (cell == null) {
            cell = row.createCell(coluna);
        }

        CellStyle originalStyle = cell.getCellStyle();
        CellStyle newStyle = workbook.createCellStyle();
        newStyle.cloneStyleFrom(originalStyle);
        newStyle.setBorderTop(BorderStyle.THIN);
        newStyle.setBorderBottom(BorderStyle.THIN);
        newStyle.setBorderLeft(BorderStyle.THIN);
        newStyle.setBorderRight(BorderStyle.THIN);
        cell.setCellStyle(newStyle);
    }

    private boolean hasThickBorder(CellStyle style) {
        return style.getBorderTop() == BorderStyle.THICK ||
               style.getBorderBottom() == BorderStyle.THICK ||
               style.getBorderLeft() == BorderStyle.THICK ||
               style.getBorderRight() == BorderStyle.THICK;
    }

    /**
     * Classe interna para gerenciamento de cache de estilos.
     */
    private static class StyleCache {
        private final Map<String, CellStyle> cache = new HashMap<>();

        public CellStyle getStyle(String key) {
            return cache.get(key);
        }

        public void putStyle(String key, CellStyle style) {
            cache.put(key, style);
        }
    }
}
