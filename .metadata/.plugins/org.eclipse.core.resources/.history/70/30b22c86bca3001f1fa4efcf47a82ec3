package com.abnote.planilhas.impl;

import com.abnote.planilhas.utils.PosicaoConverter;
import org.apache.poi.ss.usermodel.*;

public class CalculosPlanilha {

	public static void converterEmNumero(Sheet sheet, String posicaoInicial) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue;
			Cell cell = row.getCell(coluna);
			if (cell != null && cell.getCellTypeEnum() == CellType.STRING) {
				try {
					double valorNumerico = Double.parseDouble(cell.getStringCellValue());
					cell.setCellType(CellType.NUMERIC);
					cell.setCellValue(valorNumerico);
				} catch (NumberFormatException e) {
					System.out.println("Célula em " + (i + 1) + " não é numérica e foi ignorada.");
				}
			}
		}
	}

	public static void somarColunaComTexto(Sheet sheet, String posicaoInicial, String texto) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		double soma = 0.0;
		int ultimaLinha = linhaInicial;

		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue;
			Cell cell = row.getCell(coluna);
			if (cell != null && cell.getCellTypeEnum() == CellType.NUMERIC) {
				soma += cell.getNumericCellValue();
			}
			ultimaLinha = i;
		}

		Row linhaSoma = sheet.createRow(ultimaLinha + 1);
		Cell cellTexto = linhaSoma.createCell(coluna - 1);
		cellTexto.setCellValue(texto);

		Cell cellSoma = linhaSoma.createCell(coluna);
		cellSoma.setCellValue(soma);
	}

	public static void converterEmContabil(Sheet sheet, String posicaoInicial, Workbook workbook) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		// Configuração do estilo contábil para Real (R$)
		CellStyle estiloContabil = workbook.createCellStyle();
		DataFormat formato = workbook.createDataFormat();
		estiloContabil.setDataFormat(formato.getFormat("#,##0.00"));

		Row row = sheet.getRow(linhaInicial - 1); // PosicaoInicial é 1-based
		if (row != null) {
			Cell cell = row.getCell(coluna);
			if (cell != null) {
				if (cell.getCellTypeEnum() == CellType.STRING) {
					try {
						double valorNumerico = Double.parseDouble(cell.getStringCellValue());
						cell.setCellType(CellType.NUMERIC);
						cell.setCellValue(valorNumerico);
					} catch (NumberFormatException e) {
						System.out.println("Célula em " + linhaInicial + " não é numérica e foi ignorada.");
					}
				}
				if (cell.getCellTypeEnum() == CellType.NUMERIC) {
					cell.setCellStyle(estiloContabil);
				}
			}
		}
	}

	public static int ultimaLinha(Sheet sheet, String coluna) {
		int[] posicao = PosicaoConverter.converterPosicao(coluna + "1"); // Converte a coluna
		int colunaIndex = posicao[0];
		int lastRow = sheet.getLastRowNum();

		for (int i = lastRow; i >= 0; i--) {
			Row row = sheet.getRow(i);
			if (row != null) {
				Cell cell = row.getCell(colunaIndex);
				if (cell != null && cell.getCellTypeEnum() != CellType.BLANK) {
					return i + 1; // Retorna 1-based
				}
			}
		}
		return 0;
	}
}
