package com.abnote.planilhas.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;

public class InsersorDeDados {

	private final Sheet sheet;
	private final PositionManager positionManager;
	private int lastInsertedRowIndex = -1;
	private int lastInsertedColIndex = -1;

	public InsersorDeDados(Sheet sheet, PositionManager positionManager) {
		this.sheet = sheet;
		this.positionManager = positionManager;
	}

	public void inserirDados(String valor) {
		if (!positionManager.isPosicaoDefinida()) {
			positionManager.setPosicaoInicialColuna(0);
			positionManager.setPosicaoInicialLinha(0);
		}

		Row linhaAtual = sheet.getRow(positionManager.getPosicaoInicialLinha());
		if (linhaAtual == null) {
			linhaAtual = sheet.createRow(positionManager.getPosicaoInicialLinha());
		}
		Cell celula = linhaAtual.createCell(positionManager.getPosicaoInicialColuna());
		celula.setCellValue(valor);

		lastInsertedRowIndex = positionManager.getPosicaoInicialLinha();
		lastInsertedColIndex = positionManager.getPosicaoInicialColuna();

		positionManager.resetarPosicao();
	}

	public void inserirDados(Object dados, String delimitador) {
		if (dados instanceof List) {
			@SuppressWarnings("unchecked")
			List<String> lista = (List<String>) dados;
			inserirDados(lista, delimitador);
		} else if (dados instanceof String) {
			String str = (String) dados;
			if (Files.exists(Paths.get(str))) {
				inserirDadosArquivo(str, delimitador);
			} else {
				inserirDados(Arrays.asList(str.split(delimitador)), delimitador);
			}
		} else if (dados instanceof File) {
			inserirDadosArquivo(((File) dados).getPath(), delimitador);
		} else {
			throw new IllegalArgumentException("Tipo de dados n√£o suportado: " + dados.getClass());
		}
	}

	public void inserirDados(List<String> dados) {
		if (!positionManager.isPosicaoDefinida() && !positionManager.isIntervaloDefinida()) {
			positionManager.setPosicaoInicialColuna(0);
			positionManager.setPosicaoInicialLinha(0);
		}

		if (positionManager.isIntervaloDefinida()) {
			int currentRow = positionManager.getPosicaoInicialLinha();
			for (String dado : dados) {
				Row row = sheet.getRow(currentRow);
				if (row == null) {
					row = sheet.createRow(currentRow);
				}
				for (int col = positionManager.getPosicaoInicialColuna(); col <= positionManager.getPosicaoFinalColuna()
						&& col < positionManager.getPosicaoInicialColuna() + dados.size(); col++) {
					Cell cell = row.createCell(col);
					cell.setCellValue(dado);
				}
				currentRow++;
				if (currentRow > positionManager.getPosicaoFinalLinha())
					break;
			}
		} else {
			Row linhaAtual = sheet.getRow(positionManager.getPosicaoInicialLinha());
			if (linhaAtual == null) {
				linhaAtual = sheet.createRow(positionManager.getPosicaoInicialLinha());
			}
			for (int i = 0; i < dados.size(); i++) {
				Cell celula = linhaAtual.createCell(positionManager.getPosicaoInicialColuna() + i);
				celula.setCellValue(dados.get(i));
			}
			lastInsertedRowIndex = positionManager.getPosicaoInicialLinha();
			positionManager.setPosicaoInicialLinha(positionManager.getPosicaoInicialLinha() + 1);

			positionManager.resetarPosicao();
		}
	}

	public void inserirDados(List<String> dados, String delimitador) {
		inserirDados(dados);
	}

	public void inserirDadosArquivo(String caminhoArquivo, String delimitador) {
		if (!positionManager.isPosicaoDefinida() && !positionManager.isIntervaloDefinida()) {
			positionManager.setPosicaoInicialColuna(0);
			positionManager.setPosicaoInicialLinha(0);
		}

		try (BufferedReader br = new BufferedReader(new FileReader(caminhoArquivo))) {
			String linhaTexto;
			int numeroLinha = positionManager.getPosicaoInicialLinha();

			while ((linhaTexto = br.readLine()) != null) {
				String[] valores = linhaTexto.split(Pattern.quote(delimitador));
				Row linha = sheet.getRow(numeroLinha);
				if (linha == null) {
					linha = sheet.createRow(numeroLinha);
				}

				for (int numeroColuna = 0; numeroColuna < valores.length; numeroColuna++) {
					int colunaAtual = positionManager.getPosicaoInicialColuna() + numeroColuna;
					if (positionManager.isIntervaloDefinida()
							&& colunaAtual > positionManager.getPosicaoFinalColuna()) {
						break;
					}
					Cell celula = linha.createCell(colunaAtual);
					celula.setCellValue(valores[numeroColuna].trim());
				}
				numeroLinha++;
				if (positionManager.isIntervaloDefinida() && numeroLinha > positionManager.getPosicaoFinalLinha()) {
					break;
				}
			}
			lastInsertedRowIndex = numeroLinha - 1;
			positionManager.setPosicaoInicialLinha(numeroLinha);

		} catch (IOException e) {
			System.out.println("Erro ao ler o arquivo: " + e.getMessage());
		}

		positionManager.resetarPosicao();
	}

	public int getLastInsertedRowIndex() {
		return lastInsertedRowIndex;
	}

	public int getLastInsertedColIndex() {
		return lastInsertedColIndex;
	}
}
