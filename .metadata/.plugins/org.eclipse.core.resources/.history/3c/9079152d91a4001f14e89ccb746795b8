package com.abnote.planilhas.impl;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import com.abnote.planilhas.utils.PosicaoConverter;

public class CalculosPlanilha {

	/**
	 * Soma os valores numéricos de uma coluna específica e insere a soma com um
	 * texto descritivo. A célula da soma mantém a mesma formatação das células
	 * somadas.
	 *
	 * @param sheet          A folha da planilha onde a soma será realizada.
	 * @param posicaoInicial A posição inicial da coluna a ser somada (ex: "J3").
	 * @param texto          O texto descritivo que será inserido ao lado da soma.
	 */
	public static void somarColunaComTexto(Sheet sheet, String posicaoInicial, String texto) {
		// Converter a posição inicial para índices de coluna e linha (zero-based)
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		double soma = 0.0;
		int ultimaLinha = linhaInicial;
		CellStyle estiloSoma = null;

		Workbook workbook = sheet.getWorkbook();

		// Iterar sobre as linhas a partir da linha inicial até a última linha com dados
		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue; // Ignora linhas vazias

			Cell cell = row.getCell(coluna);
			if (cell != null && cell.getCellTypeEnum() == CellType.NUMERIC) {
				soma += cell.getNumericCellValue();

				// Captura o estilo da primeira célula numérica encontrada
				if (estiloSoma == null) {
					estiloSoma = cell.getCellStyle();
				}
			}
			ultimaLinha = i; // Atualiza a última linha processada
		}

		// Cria uma nova linha para inserir o texto e a soma
		Row linhaSoma = sheet.createRow(ultimaLinha + 1);

		// Insere o texto na célula anterior à coluna de soma
		Cell cellTexto = linhaSoma.createCell(coluna - 1);
		cellTexto.setCellValue(texto);

		// Insere o valor da soma na coluna especificada
		Cell cellSoma = linhaSoma.createCell(coluna);
		cellSoma.setCellValue(soma);

		// Aplica o estilo capturado à célula da soma
		if (estiloSoma != null) {
			// Cria um novo estilo para evitar modificar o estilo original
			CellStyle somaStyle = workbook.createCellStyle();
			somaStyle.cloneStyleFrom(estiloSoma);
			cellSoma.setCellStyle(somaStyle);
		} else {
			// Define um estilo padrão caso não haja células numéricas
			CellStyle defaultStyle = workbook.createCellStyle();
			defaultStyle.setDataFormat(workbook.createDataFormat().getFormat("0.00"));
			cellSoma.setCellStyle(defaultStyle);
		}
	}

	/**
	 * Converte os valores de uma coluna para números, se possível.
	 *
	 * @param sheet          A folha da planilha a ser processada.
	 * @param posicaoInicial A posição inicial da coluna (ex: "J3").
	 */
	public static void converterEmNumero(Sheet sheet, String posicaoInicial) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue;
			Cell cell = row.getCell(coluna);
			if (cell != null && cell.getCellTypeEnum() == CellType.STRING) {
				try {
					double valorNumerico = Double.parseDouble(cell.getStringCellValue());
					cell.setCellType(CellType.NUMERIC);
					cell.setCellValue(valorNumerico);
				} catch (NumberFormatException e) {
					System.out.println("Célula em " + (i + 1) + " não é numérica e foi ignorada.");
				}
			}
		}
	}

	/**
	 * Converte os valores de uma coluna para o formato contábil.
	 *
	 * @param sheet          A folha da planilha a ser processada.
	 * @param posicaoInicial A posição inicial da coluna (ex: "J3").
	 * @param workbook       O workbook da planilha para criar estilos.
	 */
	public static void converterEmContabil(Sheet sheet, String posicaoInicial, Workbook workbook) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		// Configuração do estilo contábil para Real (R$)
		CellStyle estiloContabil = workbook.createCellStyle();
		DataFormat formato = workbook.createDataFormat();
		estiloContabil.setDataFormat(formato.getFormat("#,##0.00"));

		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue;
			Cell cell = row.getCell(coluna);
			if (cell != null) {
				if (cell.getCellTypeEnum() == CellType.STRING) {
					try {
						double valorNumerico = Double.parseDouble(cell.getStringCellValue());
						cell.setCellType(CellType.NUMERIC);
						cell.setCellValue(valorNumerico);
					} catch (NumberFormatException e) {
						System.out.println("Célula em " + (i + 1) + " não é numérica e foi ignorada.");
					}
				}
				if (cell.getCellTypeEnum() == CellType.NUMERIC) {
					cell.setCellStyle(estiloContabil);
				}
			}
		}
	}
}
