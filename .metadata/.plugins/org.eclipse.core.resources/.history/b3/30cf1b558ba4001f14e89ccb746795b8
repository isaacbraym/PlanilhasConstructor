import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xddf.usermodel.chart.*;
import org.apache.poi.xssf.usermodel.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class TestePlanilha {
    private static String diretorioSaida = "C:\\opt\\tmp\\testePlanilhaSaidas";
    private static String nomeArquivo = "dashboard.xlsx";

    public static void main(String[] args) {
        // Cria o diretório de saída se não existir
        File diretorio = new File(diretorioSaida);
        if (!diretorio.exists()) {
            boolean criado = diretorio.mkdirs();
            if (!criado) {
                System.err.println("Não foi possível criar o diretório de saída.");
                return;
            }
        }

        // Cria um novo workbook
        XSSFWorkbook workbook = new XSSFWorkbook();

        // Cria uma nova planilha chamada "Dados"
        XSSFSheet sheet = workbook.createSheet("Dados");

        // Insere alguns dados na planilha "Dados"
        Object[][] dados = {
            {"Categoria", "Valor"},
            {"Categoria A", 40},
            {"Categoria B", 30},
            {"Categoria C", 20},
            {"Categoria D", 10}
        };

        int rowNum = 0;
        for (Object[] linha : dados) {
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;
            for (Object campo : linha) {
                Cell cell = row.createCell(colNum++);
                if (campo instanceof String) {
                    cell.setCellValue((String) campo);
                } else if (campo instanceof Integer) {
                    cell.setCellValue((Integer) campo);
                }
            }
        }

        // Autoajusta as colunas para melhor visualização
        for (int i = 0; i < dados[0].length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Cria uma nova planilha para o gráfico chamada "Dashboard"
        XSSFSheet chartSheet = workbook.createSheet("Dashboard");

        // Define a posição e o tamanho do gráfico na planilha "Dashboard"
        XSSFDrawing drawing = chartSheet.createDrawingPatriarch();
        XSSFClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 0, 0, 10, 20);

        // Cria o gráfico
        XSSFChart chart = drawing.createChart(anchor);
        chart.setTitleText("Distribuição de Categorias");
        chart.setTitleOverlay(false);

        // Configura a legenda do gráfico
        XDDFChartLegend legend = chart.getOrAddLegend();
        legend.setPosition(LegendPosition.RIGHT);

        // Define os dados para o gráfico de pizza
        XDDFDataSource<String> categorias = XDDFDataSourcesFactory.fromStringCellRange(sheet,
                new CellRangeAddress(1, 4, 0, 0));
        XDDFNumericalDataSource<Double> valores = XDDFDataSourcesFactory.fromNumericCellRange(sheet,
                new CellRangeAddress(1, 4, 1, 1));

        // Cria os dados do gráfico de pizza
        XDDFPieChartData pieData = (XDDFPieChartData) chart.createData(ChartTypes.PIE, null, null);
        XDDFPieChartData.Series series = (XDDFPieChartData.Series) pieData.addSeries(categorias, valores);
        series.setTitle("Categorias", null);
        pieData.setVaryColors(true);

        // Plota o gráfico com os dados definidos
        chart.plot(pieData);

        // Salva o arquivo no diretório especificado
        String caminhoCompleto = diretorioSaida + File.separator + nomeArquivo;
        try (FileOutputStream fos = new FileOutputStream(caminhoCompleto)) {
            workbook.write(fos);
            System.out.println("Planilha criada com sucesso em: " + caminhoCompleto);
        } catch (IOException e) {
            System.err.println("Erro ao salvar a planilha: " + e.getMessage());
        } finally {
            try {
                workbook.close();
            } catch (IOException e) {
                // Ignorar erros ao fechar o workbook
            }
        }
    }
}