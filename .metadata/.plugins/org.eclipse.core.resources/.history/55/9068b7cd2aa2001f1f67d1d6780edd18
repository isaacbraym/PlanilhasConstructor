import org.apache.poi.ss.usermodel.*;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

public abstract class PlanilhaBase implements IPlanilha {
    protected Workbook workbook;
    protected Sheet sheet;
    private int posicaoInicialColuna = 0;
    private int posicaoInicialLinha = 0;
    private String diretorioSaida = "C:\\opt\\tmp\\testePlanilhaSaidas"; // Diretório padrão

    // Rastreia a última linha inserida
    private int lastInsertedRowIndex = -1;

    protected abstract void inicializarWorkbook();

    @Override
    public void criarPlanilha(String nomeSheet) {
        inicializarWorkbook();
        sheet = workbook.createSheet(nomeSheet);
    }

    @Override
    public void inserirDadosColuna(List<String> dados, int numeroColuna, int linhaInicial) {
        int numLinha = linhaInicial;
        for (String valor : dados) {
            Row linha = sheet.createRow(numLinha++);
            Cell celula = linha.createCell(numeroColuna);
            celula.setCellValue(valor);
        }
    }

    @Override
    public IPlanilha inserirDadosLinha(List<String> dados) {
        Row linhaAtual = sheet.createRow(posicaoInicialLinha);
        for (int i = 0; i < dados.size(); i++) {
            Cell celula = linhaAtual.createCell(posicaoInicialColuna + i);
            celula.setCellValue(dados.get(i));
        }
        // Atualiza o índice da última linha inserida
        lastInsertedRowIndex = posicaoInicialLinha;
        posicaoInicialLinha++;
        return this;
    }

    @Override
    public IPlanilha gravarDadoNaCelula(String posicao) {
        int coluna = 0;
        int linha = 0;

        for (int i = 0; i < posicao.length(); i++) {
            char ch = posicao.charAt(i);
            if (Character.isLetter(ch)) {
                coluna = coluna * 26 + (Character.toUpperCase(ch) - 'A' + 1);
            } else if (Character.isDigit(ch)) {
                linha = Integer.parseInt(posicao.substring(i)) - 1;
                break;
            }
        }

        this.posicaoInicialColuna = coluna - 1;
        this.posicaoInicialLinha = linha;
        return this;
    }

    @Override
    public IPlanilha inserirDadosArquivo(String caminhoArquivo) {
        try (BufferedReader br = new BufferedReader(new FileReader(caminhoArquivo))) {
            String linhaTexto;
            int numeroLinha = posicaoInicialLinha;

            while ((linhaTexto = br.readLine()) != null) {
                String[] valores = linhaTexto.split(";");
                Row linha = sheet.getRow(numeroLinha);
                if (linha == null) {
                    linha = sheet.createRow(numeroLinha);
                }

                for (int numeroColuna = 0; numeroColuna < valores.length; numeroColuna++) {
                    Cell celula = linha.createCell(posicaoInicialColuna + numeroColuna);
                    celula.setCellValue(valores[numeroColuna].trim());
                }
                numeroLinha++;
            }
            // Atualiza o índice da última linha inserida
            lastInsertedRowIndex = numeroLinha - 1;
            posicaoInicialLinha = numeroLinha;
        } catch (IOException e) {
            System.out.println("Erro ao ler o arquivo: " + e.getMessage());
        }
        return this;
    }

    @Override
    public EstiloCelula aplicarEstilo() {
        return new EstiloCelula(workbook, sheet);
    }

    @Override
    public EstiloCelula aplicarEstilos() {
        if (lastInsertedRowIndex == -1) {
            // Nenhuma linha para aplicar estilos
            return null;
        }
        return new EstiloCelula(workbook, sheet, lastInsertedRowIndex);
    }

    @Override
    public IPlanilha converterEmNumero(String posicaoInicial) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int linhaInicial = posicao[1];

        for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            Cell cell = row.getCell(coluna);
            if (cell != null && cell.getCellType() == CellType.STRING) {
                try {
                    double valorNumerico = Double.parseDouble(cell.getStringCellValue());
                    cell.setCellType(CellType.NUMERIC);
                    cell.setCellValue(valorNumerico);
                } catch (NumberFormatException e) {
                    System.out.println("Célula em " + (i+1) + " não é numérica e foi ignorada.");
                }
            }
        }
        return this;
    }

    @Override
    public IPlanilha somarColunaComTexto(String posicaoInicial, String texto) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int linhaInicial = posicao[1];

        double soma = 0.0;
        int ultimaLinha = linhaInicial;

        for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            Cell cell = row.getCell(coluna);
            if (cell != null && cell.getCellType() == CellType.NUMERIC) {
                soma += cell.getNumericCellValue();
            }
            ultimaLinha = i;
        }

        Row linhaSoma = sheet.createRow(ultimaLinha + 1);
        Cell cellTexto = linhaSoma.createCell(coluna - 1);
        cellTexto.setCellValue(texto);

        Cell cellSoma = linhaSoma.createCell(coluna);
        cellSoma.setCellValue(soma);

        // Atualiza o índice da última linha inserida
        lastInsertedRowIndex = ultimaLinha + 1;

        return this;
    }

    @Override
    public IPlanilha aplicarBoldUltimaLinha(String posicaoInicial) {
        EstiloCelula estilo = aplicarEstilos();
        if (estilo != null) {
            estilo.aplicarBoldUltimaLinha(posicaoInicial);
        }
        return this;
    }

    @Override
    public IPlanilha inserirEmLinha(String posicaoInicial, String posicaoFinal) {
        aplicarEstilo().inserirEmLinha(posicaoInicial, posicaoFinal);
        return this;
    }

    @Override
    public EstiloCelula centralizarTudo() {
        return aplicarEstilo().centralizarTudo();
    }

    @Override
    public EstiloCelula redimensionarColunas() {
        return aplicarEstilo().redimensionarColunas();
    }

    @Override
    public EstiloCelula removerLinhasDeGrade() {
        return aplicarEstilo().removerLinhasDeGrade();
    }

    private int[] converterPosicao(String posicao) {
        int coluna = 0;
        int linha = 0;

        for (int i = 0; i < posicao.length(); i++) {
            char ch = posicao.charAt(i);
            if (Character.isLetter(ch)) {
                coluna = coluna * 26 + (Character.toUpperCase(ch) - 'A' + 1);
            } else if (Character.isDigit(ch)) {
                linha = Integer.parseInt(posicao.substring(i)) - 1;
                break;
            }
        }
        return new int[]{coluna - 1, linha};
    }

    @Override
    public void salvar(String nomeArquivo) throws IOException {
        try (FileOutputStream arquivoSaida = new FileOutputStream(nomeArquivo)) {
            workbook.write(arquivoSaida);
            System.out.println("Planilha criada com sucesso em: " + nomeArquivo);
        }
    }

    @Override
    public void setDiretorioSaida(String diretorioSaida) {
        this.diretorioSaida = diretorioSaida;
    }

    @Override
    public String getDiretorioSaida() {
        return diretorioSaida;
    }
}
