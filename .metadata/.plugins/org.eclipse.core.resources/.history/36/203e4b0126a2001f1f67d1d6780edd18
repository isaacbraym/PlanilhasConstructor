import org.apache.poi.ss.usermodel.*;
import java.io.*;
import java.nio.file.*;
import java.util.List;

public abstract class PlanilhaBase implements IPlanilha {
    protected Workbook workbook;
    protected Sheet sheet;
    private int posicaoInicialColuna = 0;
    private int posicaoInicialLinha = 0;
    private String diretorioSaida = "C:\\opt\\tmp\\testePlanilhaSaidas"; // Diretório padrão

    protected abstract void inicializarWorkbook();

    @Override
    public void criarPlanilha(String nomeSheet) {
        inicializarWorkbook();
        sheet = workbook.createSheet(nomeSheet);
    }

    @Override
    public void inserirDadosColuna(List<String> dados, int numeroColuna, int linhaInicial) {
        int numLinha = linhaInicial;
        for (String valor : dados) {
            Row linha = sheet.createRow(numLinha++);
            Cell celula = linha.createCell(numeroColuna);
            celula.setCellValue(valor);
        }
    }

    @Override
    public void inserirDadosLinha(List<String> dados) {
        Row linhaAtual = sheet.createRow(posicaoInicialLinha);
        for (int i = 0; i < dados.size(); i++) {
            Cell celula = linhaAtual.createCell(posicaoInicialColuna + i);
            celula.setCellValue(dados.get(i));
        }
        posicaoInicialLinha++;
    }

    @Override
    public IPlanilha naCelula(int coluna, int linha) {
        this.posicaoInicialColuna = coluna;
        this.posicaoInicialLinha = linha;
        return this;
    }

    @Override
    public IPlanilha gravarDadoNaCelula(String posicao) {
        int coluna = 0;
        int linha = 0;

        for (int i = 0; i < posicao.length(); i++) {
            char ch = posicao.charAt(i);
            if (Character.isLetter(ch)) {
                coluna = coluna * 26 + (Character.toUpperCase(ch) - 'A' + 1);
            } else if (Character.isDigit(ch)) {
                linha = Integer.parseInt(posicao.substring(i)) - 1;
                break;
            }
        }

        this.posicaoInicialColuna = coluna - 1;
        this.posicaoInicialLinha = linha;
        return this;
    }

    @Override
    public IPlanilha inserirDadosArquivo(String caminhoArquivo) {
        try (BufferedReader br = new BufferedReader(new FileReader(caminhoArquivo))) {
            String linhaTexto;
            int numeroLinha = posicaoInicialLinha;

            while ((linhaTexto = br.readLine()) != null) {
                String[] valores = linhaTexto.split(";");
                Row linha = sheet.getRow(numeroLinha);
                if (linha == null) {
                    linha = sheet.createRow(numeroLinha);
                }

                for (int numeroColuna = 0; numeroColuna < valores.length; numeroColuna++) {
                    Cell celula = linha.createCell(posicaoInicialColuna + numeroColuna);
                    celula.setCellValue(valores[numeroColuna].trim());
                }
                numeroLinha++;
            }
        } catch (IOException e) {
            System.out.println("Erro ao ler o arquivo: " + e.getMessage());
        }
        return this;
    }

    @Override
    public EstiloCelula aplicarEstilo() {
        return new EstiloCelula(workbook, sheet);
    }

    @Override
    public Workbook obterWorkbook() {
        return workbook;
    }

    @Override
    public IPlanilha converterEmNumero(String posicaoInicial) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int linhaInicial = posicao[1];

        for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            Cell cell = row.getCell(coluna);
            if (cell != null && cell.getCellTypeEnum() == CellType.STRING) { // Atualizado para getCellType()
                try {
                    double valorNumerico = Double.parseDouble(cell.getStringCellValue());
                    cell.setCellType(CellType.NUMERIC);
                    cell.setCellValue(valorNumerico);
                } catch (NumberFormatException e) {
                    System.out.println("Célula em " + (i + 1) + " não é numérica e foi ignorada.");
                }
            }
        }
        return this;
    }

    @Override
    public IPlanilha somarColuna(String posicaoInicial) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int linhaInicial = posicao[1];

        double soma = 0.0;
        int ultimaLinha = linhaInicial;

        for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            Cell cell = row.getCell(coluna);
            if (cell != null && cell.getCellTypeEnum() == CellType.NUMERIC) {
                soma += cell.getNumericCellValue();
            }
            ultimaLinha = i;
        }

        Row linhaSoma = sheet.createRow(ultimaLinha + 1);
        Cell cellSoma = linhaSoma.createCell(coluna);
        cellSoma.setCellValue(soma);

        return this;
    }

    @Override
    public IPlanilha somarColunaComTexto(String posicaoInicial, String texto) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int linhaInicial = posicao[1];

        double soma = 0.0;
        int ultimaLinha = linhaInicial;

        for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;
            Cell cell = row.getCell(coluna);
            if (cell != null && cell.getCellTypeEnum() == CellType.NUMERIC) {
                soma += cell.getNumericCellValue();
            }
            ultimaLinha = i;
        }

        Row linhaSoma = sheet.createRow(ultimaLinha + 1);
        Cell cellTexto = linhaSoma.createCell(coluna - 1);
        cellTexto.setCellValue(texto);

        Cell cellSoma = linhaSoma.createCell(coluna);
        cellSoma.setCellValue(soma);

        return this;
    }

    @Override
    public void aplicarBoldStyle(int numeroColuna) {
        EstiloCelula estilo = aplicarEstilo();
        estilo.aplicarBoldUltimaLinha(getPosicaoString(numeroColuna, sheet.getLastRowNum()));
    }

    @Override
    public void salvarPlanilha(String nomeArquivo) throws IOException {
        // Criação do diretório de saída se não existir
        Path caminhoDiretorio = Paths.get(diretorioSaida);
        if (!Files.exists(caminhoDiretorio)) {
            try {
                Files.createDirectories(caminhoDiretorio);
            } catch (IOException e) {
                System.out.println("Erro ao criar diretório: " + e.getMessage());
                throw e;
            }
        }

        // Construção do caminho completo do arquivo
        String caminhoArquivoCompleto = Paths.get(diretorioSaida, nomeArquivo).toString();

        // Salvamento da planilha
        try (FileOutputStream arquivoSaida = new FileOutputStream(caminhoArquivoCompleto)) {
            workbook.write(arquivoSaida);
            System.out.println("Planilha criada com sucesso em: " + caminhoArquivoCompleto);
        } catch (IOException e) {
            System.out.println("Erro ao salvar a planilha: " + e.getMessage());
            throw e;
        }
    }

    // Método para definir um diretório de saída personalizado
    public void setDiretorioSaida(String diretorioPersonalizado) {
        this.diretorioSaida = diretorioPersonalizado;
    }

    // Método auxiliar para converter coluna e linha em posição string (e.g., 1, 2 -> "B3")
    protected String getPosicaoString(int coluna, int linha) {
        StringBuilder posicao = new StringBuilder();
        coluna += 1; // Ajuste para 1-based

        while (coluna > 0) {
            int rem = (coluna - 1) % 26;
            posicao.insert(0, (char) (rem + 'A'));
            coluna = (coluna - 1) / 26;
        }

        posicao.append(linha + 1); // Ajuste para 1-based
        return posicao.toString();
    }

    // Método auxiliar para converter posição string (e.g., "B3") para índices de coluna e linha
    protected int[] converterPosicao(String posicao) {
        int coluna = 0;
        int linha = 0;

        for (int i = 0; i < posicao.length(); i++) {
            char ch = posicao.charAt(i);
            if (Character.isLetter(ch)) {
                coluna = coluna * 26 + (Character.toUpperCase(ch) - 'A' + 1);
            } else if (Character.isDigit(ch)) {
                linha = Integer.parseInt(posicao.substring(i)) - 1;
                break;
            }
        }
        return new int[]{coluna - 1, linha};
    }
}
