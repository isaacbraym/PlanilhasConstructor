import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.*;

public class EstiloCelula {
    private final Workbook workbook;
    private final Sheet sheet;
    private final CellStyle boldStyle;
    private final CellStyle borderStyle;
    private final CellStyle centeredStyle;

    // Adicionamos um cache para estilos combinados para evitar a criação excessiva de estilos
    private final Map<String, CellStyle> styleCache = new HashMap<>();

    public EstiloCelula(Workbook workbook, Sheet sheet) {
        this.workbook = workbook;
        this.sheet = sheet;

        // Estilo bold
        Font font = workbook.createFont();
        font.setBold(true);
        boldStyle = workbook.createCellStyle();
        boldStyle.setFont(font);

        // Estilo de borda
        borderStyle = workbook.createCellStyle();
        borderStyle.setBorderTop(BorderStyle.THIN);
        borderStyle.setBorderBottom(BorderStyle.THIN);
        borderStyle.setBorderLeft(BorderStyle.THIN);
        borderStyle.setBorderRight(BorderStyle.THIN);

        // Estilo centralizado
        centeredStyle = workbook.createCellStyle();
        centeredStyle.setAlignment(HorizontalAlignment.CENTER);
        centeredStyle.setVerticalAlignment(VerticalAlignment.CENTER);
    }

    /**
     * Cria ou recupera um CellStyle combinado a partir de uma chave única.
     * Por exemplo, "bold_centered" combina bold e centralização.
     */
    private CellStyle getCombinedStyle(String key) {
        if (styleCache.containsKey(key)) {
            return styleCache.get(key);
        }

        CellStyle combinedStyle = workbook.createCellStyle();

        // Dividimos a chave para aplicar os estilos necessários
        String[] styles = key.split("_");
        for (String style : styles) {
            switch (style) {
                case "bold":
                    combinedStyle.cloneStyleFrom(boldStyle);
                    break;
                case "border":
                    combinedStyle.cloneStyleFrom(borderStyle);
                    break;
                case "centered":
                    combinedStyle.cloneStyleFrom(centeredStyle);
                    break;
                // Adicione mais casos conforme necessário
            }
        }

        styleCache.put(key, combinedStyle);
        return combinedStyle;
    }

    /**
     * Aplica negrito e centralização a todas as células.
     */
    public EstiloCelula aplicarBoldECentralizado(String posicaoInicial) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int ultimaLinha = -1;
        for (int i = posicao[1]; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(coluna);
                if (cell != null && cell.getCellTypeEnum() != CellType.BLANK) {
                    ultimaLinha = i;
                }
            }
        }
        if (ultimaLinha >= 0) {
            Row row = sheet.getRow(ultimaLinha);
            Cell cell = row.getCell(coluna);
            if (cell == null) {
                cell = row.createCell(coluna);
            }
            // Cria um estilo combinado com bold e centralizado
            CellStyle combinedStyle = getCombinedStyle("bold_centered");
            cell.setCellStyle(combinedStyle);
        }
        return this;
    }

    // Métodos existentes...

    public EstiloCelula aplicarBoldUltimaLinha(String posicaoInicial) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int ultimaLinha = -1;
        for (int i = posicao[1]; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(coluna);
                if (cell != null && cell.getCellTypeEnum() != CellType.BLANK) {
                    ultimaLinha = i;
                }
            }
        }
        if (ultimaLinha >= 0) {
            Row row = sheet.getRow(ultimaLinha);
            Cell cell = row.getCell(coluna);
            if (cell == null) {
                cell = row.createCell(coluna);
            }
            cell.setCellStyle(boldStyle);
        }
        return this;
    }

    public EstiloCelula aplicarTodasAsBordas(String posicaoInicial, String posicaoFinal) {
        int[] inicio = converterPosicao(posicaoInicial);
        int[] fim = converterPosicao(posicaoFinal);

        for (int rowIdx = inicio[1]; rowIdx <= fim[1]; rowIdx++) {
            Row row = sheet.getRow(rowIdx);
            if (row == null) {
                row = sheet.createRow(rowIdx);
            }
            for (int colIdx = inicio[0]; colIdx <= fim[0]; colIdx++) {
                Cell cell = row.getCell(colIdx);
                if (cell == null) {
                    cell = row.createCell(colIdx);
                }
                cell.setCellStyle(borderStyle);
            }
        }
        return this;
    }

    public EstiloCelula centralizarTudo() {
        for (Row row : sheet) {
            for (Cell cell : row) {
                cell.setCellStyle(centeredStyle);
            }
        }
        return this;
    }

    public EstiloCelula redimensionarColunas() {
        if (sheet.getRow(0) != null) {
            int numColumns = sheet.getRow(0).getPhysicalNumberOfCells();
            for (int i = 0; i < numColumns; i++) {
                sheet.autoSizeColumn(i);
            }
        }
        return this;
    }

    public EstiloCelula removerLinhasDeGrade() {
        sheet.setDisplayGridlines(false);
        return this;
    }

    private int[] converterPosicao(String posicao) {
        int coluna = 0;
        int linha = 0;
        for (int i = 0; i < posicao.length(); i++) {
            char ch = posicao.charAt(i);
            if (Character.isLetter(ch)) {
                coluna = coluna * 26 + (Character.toUpperCase(ch) - 'A' + 1);
            } else if (Character.isDigit(ch)) {
                linha = Integer.parseInt(posicao.substring(i)) - 1;
                break;
            }
        }
        return new int[] { coluna - 1, linha };
    }

    // Métodos para aplicar estilo em linha ou coluna
    public EstiloCelula inserirEmLinha(String posicaoInicial, String posicaoFinal) {
        int[] inicio = converterPosicao(posicaoInicial);
        int[] fim = converterPosicao(posicaoFinal);

        Row row = sheet.getRow(inicio[1]);
        if (row == null) {
            row = sheet.createRow(inicio[1]);
        }

        for (int col = inicio[0]; col <= fim[0]; col++) {
            Cell cell = row.getCell(col);
            if (cell == null) {
                cell = row.createCell(col);
            }
            cell.setCellStyle(boldStyle);
        }
        return this;
    }

    public EstiloCelula inserirEmColuna(String posicaoInicial, String posicaoFinal) {
        int[] inicio = converterPosicao(posicaoInicial);
        int[] fim = converterPosicao(posicaoFinal);

        for (int rowIdx = inicio[1]; rowIdx <= fim[1]; rowIdx++) {
            Row row = sheet.getRow(rowIdx);
            if (row == null) {
                row = sheet.createRow(rowIdx);
            }
            Cell cell = row.getCell(inicio[0]);
            if (cell == null) {
                cell = row.createCell(inicio[0]);
            }
            cell.setCellStyle(boldStyle);
        }
        return this;
    }
}
