package com.abnote.planilhas.impl;

import com.abnote.planilhas.utils.PosicaoConverter;

import org.apache.poi.ss.usermodel.*;

public class CalculosPlanilha {

	public static void converterEmNumero(Sheet sheet, String posicaoInicial) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue;
			Cell cell = row.getCell(coluna);
			if (cell != null && cell.getCellTypeEnum() == CellType.STRING) {
				try {
					double valorNumerico = Double.parseDouble(cell.getStringCellValue());
					cell.setCellType(CellType.NUMERIC);
					cell.setCellValue(valorNumerico);
				} catch (NumberFormatException e) {
					System.out.println("Célula em " + (i + 1) + " não é numérica e foi ignorada.");
				}
			}
		}
	}

//	public static void somarColunaComTexto(Sheet sheet, String posicaoInicial, String texto) {
//		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
//		int coluna = posicao[0];
//		int linhaInicial = posicao[1];
//
//		double soma = 0.0;
//		int ultimaLinha = linhaInicial;
//
//		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
//			Row row = sheet.getRow(i);
//			if (row == null)
//				continue;
//			Cell cell = row.getCell(coluna);
//			if (cell != null && cell.getCellTypeEnum() == CellType.NUMERIC) {
//				soma += cell.getNumericCellValue();
//			}
//			ultimaLinha = i;
//		}
//
//		Row linhaSoma = sheet.createRow(ultimaLinha + 1);
//		Cell cellTexto = linhaSoma.createCell(coluna - 1);
//		cellTexto.setCellValue(texto);
//
//		Cell cellSoma = linhaSoma.createCell(coluna);
//		cellSoma.setCellValue(soma);
//	}
	public static void somarColunaComTexto(Sheet sheet, String posicaoInicial, String texto) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		double somaNumerica = 0.0;
		double somaContabil = 0.0;
		boolean temCélulaContábil = false; // Para identificar se existe célula contábil
		int ultimaLinha = linhaInicial;

		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue;
			Cell cell = row.getCell(coluna);
			if (cell != null) {
				switch (cell.getCellTypeEnum()) {
				case NUMERIC:
					if (cell.getCellStyle() != null && cell.getCellStyle().getDataFormatString().contains("#,##0.00")) {
						// Célula contábil
						temCélulaContábil = true;
						somaContabil += cell.getNumericCellValue();
					} else {
						// Célula numérica comum
						somaNumerica += cell.getNumericCellValue();
					}
					break;
				case FORMULA:
					try {
						// Avaliar fórmulas como numéricas
						double formulaValue = cell.getNumericCellValue();
						if (cell.getCellStyle() != null
								&& cell.getCellStyle().getDataFormatString().contains("#,##0.00")) {
							temCélulaContábil = true;
							somaContabil += formulaValue;
						} else {
							somaNumerica += formulaValue;
						}
					} catch (Exception e) {
						System.out.println("Erro ao avaliar fórmula na célula: " + e.getMessage());
					}
					break;
				default:
					// Outros tipos de células são ignorados
					break;
				}
			}
			ultimaLinha = i;
		}

		// Determinar o valor final com base no tipo predominante
		double valorFinal = temCélulaContábil ? somaContabil : somaNumerica;

		// Criar linha de soma
		Row linhaSoma = sheet.createRow(ultimaLinha + 1);
		Cell cellTexto = linhaSoma.createCell(coluna - 1);
		cellTexto.setCellValue(texto);

		Cell cellSoma = linhaSoma.createCell(coluna);
		if (temCélulaContábil) {
			// Aplicar estilo contábil na célula de soma
			CellStyle estiloContabil = sheet.getWorkbook().createCellStyle();
			estiloContabil.setDataFormat(sheet.getWorkbook().createDataFormat().getFormat("#,##0.00"));
			cellSoma.setCellStyle(estiloContabil);
		}
		cellSoma.setCellValue(valorFinal);
	}

	public static void converterEmContabil(Sheet sheet, String posicaoInicial, Workbook workbook) {
		int[] posicao = PosicaoConverter.converterPosicao(posicaoInicial);
		int coluna = posicao[0];
		int linhaInicial = posicao[1];

		// Configuração do estilo contábil para Real (R$)
		CellStyle estiloContabil = workbook.createCellStyle();
		DataFormat formato = workbook.createDataFormat();
		estiloContabil.setDataFormat(formato.getFormat("#,##0.00"));

		for (int i = linhaInicial; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			if (row == null)
				continue;
			Cell cell = row.getCell(coluna);
			if (cell != null) {
				if (cell.getCellTypeEnum() == CellType.STRING) {
					try {
						double valorNumerico = Double.parseDouble(cell.getStringCellValue());
						cell.setCellType(CellType.NUMERIC);
						cell.setCellValue(valorNumerico);
					} catch (NumberFormatException e) {
						System.out.println("Célula em " + (i + 1) + " não é numérica e foi ignorada.");
					}
				}
				if (cell.getCellTypeEnum() == CellType.NUMERIC) {
					cell.setCellStyle(estiloContabil);
				}
			}
		}
	}
}
