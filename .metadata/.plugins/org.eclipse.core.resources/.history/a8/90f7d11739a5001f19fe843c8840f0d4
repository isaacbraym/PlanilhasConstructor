package com.abnote.planilhas.estilos.estilos;

import java.util.Map;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import java.awt.Color;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFColor;

public class Fontes {
    private final Workbook workbook;
    private final Sheet sheet;
    private final Map<String, CellStyle> styleCache;

    public Fontes(Workbook workbook, Sheet sheet, Map<String, CellStyle> styleCache) {
        this.workbook = workbook;
        this.sheet = sheet;
        this.styleCache = styleCache;
    }

    public void aplicarCorFonte(CorEnum corEnum, int rowIndex, int columnIndex, int startRowIndex,
            int startColumnIndex, int endRowIndex, int endColumnIndex, boolean isRange) {
        aplicarCorFonte(corEnum.getRed(), corEnum.getGreen(), corEnum.getBlue(), rowIndex, columnIndex, startRowIndex,
                startColumnIndex, endRowIndex, endColumnIndex, isRange);
    }

    public void aplicarCorFonte(int red, int green, int blue, int rowIndex, int columnIndex, int startRowIndex,
            int startColumnIndex, int endRowIndex, int endColumnIndex, boolean isRange) {

        if (isRange) {
            for (int rowIdx = startRowIndex; rowIdx <= endRowIndex; rowIdx++) {
                Row row = sheet.getRow(rowIdx);
                if (row == null)
                    continue;
                for (int colIdx = startColumnIndex; colIdx <= endColumnIndex; colIdx++) {
                    Cell cell = row.getCell(colIdx);
                    if (cell == null)
                        continue;
                    applyFontColorToCell(cell, red, green, blue);
                }
            }
        } else if (rowIndex != -1) {
            if (columnIndex == -1) {
                // Aplicar à linha inteira
                Row row = sheet.getRow(rowIndex);
                if (row != null) {
                    for (Cell cell : row) {
                        if (cell != null) {
                            applyFontColorToCell(cell, red, green, blue);
                        }
                    }
                }
            } else {
                // Aplicar à célula específica
                Row row = sheet.getRow(rowIndex);
                if (row != null) {
                    Cell cell = row.getCell(columnIndex);
                    if (cell != null) {
                        applyFontColorToCell(cell, red, green, blue);
                    }
                }
            }
        }
    }

    private void applyFontColorToCell(Cell cell, int red, int green, int blue) {
        // Obter o estilo atual da célula
        CellStyle currentStyle = cell.getCellStyle();

        // Clonar o estilo atual
        CellStyle newStyle = workbook.createCellStyle();
        newStyle.cloneStyleFrom(currentStyle);

        // Obter a fonte atual
        Font currentFont = workbook.getFontAt(currentStyle.getFontIndex());

        // Criar nova fonte com a cor aplicada
        Font newFont = workbook.createFont();

        // Copiar atributos existentes
        newFont.setFontName(currentFont.getFontName());
        newFont.setFontHeightInPoints(currentFont.getFontHeightInPoints());
        newFont.setBold(currentFont.getBold());
        newFont.setItalic(currentFont.getItalic());
        newFont.setUnderline(currentFont.getUnderline());
        newFont.setTypeOffset(currentFont.getTypeOffset());
        newFont.setStrikeout(currentFont.getStrikeout());
        newFont.setCharSet(currentFont.getCharSet());

        if (newFont instanceof XSSFFont) {
            XSSFFont xssfFont = (XSSFFont) newFont;
            xssfFont.setColor(new XSSFColor(new Color(red, green, blue)));
        } else if (newFont instanceof HSSFFont) {
            // Para HSSF, mapeie para a cor indexada mais próxima
            short colorIndex = getNearestColorIndex(red, green, blue);
            newFont.setColor(colorIndex);
        }

        // Associar a nova fonte ao novo estilo
        newStyle.setFont(newFont);

        // Aplicar o novo estilo à célula
        cell.setCellStyle(newStyle);
    }

    private short getNearestColorIndex(int red, int green, int blue) {
        // Implementação para HSSF se necessário
        return IndexedColors.BLACK.getIndex(); // Retorne preto como padrão
    }

    // Método existente que aceita String
    public void aplicarFonte(String fontName, int rowIndex, int columnIndex, int startRowIndex, int startColumnIndex,
            int endRowIndex, int endColumnIndex, boolean isRange) {
        aplicarFonteGeral(fontName, rowIndex, columnIndex, startRowIndex, startColumnIndex, endRowIndex, endColumnIndex,
                isRange);
    }

    // Novo método que aceita FonteEnum
    public void aplicarFonte(FonteEnum fonteEnum, int rowIndex, int columnIndex, int startRowIndex, int startColumnIndex,
            int endRowIndex, int endColumnIndex, boolean isRange) {
        aplicarFonteGeral(fonteEnum.getFontName(), rowIndex, columnIndex, startRowIndex, startColumnIndex, endRowIndex,
                endColumnIndex, isRange);
    }

    // Método privado que realiza a lógica comum
    private void aplicarFonteGeral(String fontName, int rowIndex, int columnIndex, int startRowIndex,
            int startColumnIndex, int endRowIndex, int endColumnIndex, boolean isRange) {

        if (isRange) {
            for (int rowIdx = startRowIndex; rowIdx <= endRowIndex; rowIdx++) {
                Row row = sheet.getRow(rowIdx);
                if (row == null)
                    continue;
                for (int colIdx = startColumnIndex; colIdx <= endColumnIndex; colIdx++) {
                    Cell cell = row.getCell(colIdx);
                    if (cell == null)
                        continue;
                    applyFontNameToCell(cell, fontName);
                }
            }
        } else if (rowIndex != -1) {
            if (columnIndex == -1) {
                // Aplicar à linha inteira
                Row row = sheet.getRow(rowIndex);
                if (row != null) {
                    for (Cell cell : row) {
                        if (cell != null) {
                            applyFontNameToCell(cell, fontName);
                        }
                    }
                }
            } else {
                // Aplicar à célula específica
                Row row = sheet.getRow(rowIndex);
                if (row != null) {
                    Cell cell = row.getCell(columnIndex);
                    if (cell != null) {
                        applyFontNameToCell(cell, fontName);
                    }
                }
            }
        }
    }

    private void applyFontNameToCell(Cell cell, String fontName) {
        // Obter o estilo atual da célula
        CellStyle currentStyle = cell.getCellStyle();

        // Clonar o estilo atual
        CellStyle newStyle = workbook.createCellStyle();
        newStyle.cloneStyleFrom(currentStyle);

        // Obter a fonte atual
        Font currentFont = workbook.getFontAt(currentStyle.getFontIndex());

        // Criar nova fonte com as alterações
        Font newFont = workbook.createFont();
        newFont.setFontName(fontName != null ? fontName : currentFont.getFontName());
        newFont.setFontHeightInPoints(currentFont.getFontHeightInPoints());
        newFont.setBold(currentFont.getBold());
        newFont.setItalic(currentFont.getItalic());
        newFont.setUnderline(currentFont.getUnderline());
        newFont.setColor(currentFont.getColor());
        newFont.setTypeOffset(currentFont.getTypeOffset());
        newFont.setStrikeout(currentFont.getStrikeout());
        newFont.setCharSet(currentFont.getCharSet());

        // Associar a nova fonte ao novo estilo
        newStyle.setFont(newFont);

        // Aplicar o novo estilo à célula
        cell.setCellStyle(newStyle);
    }

    public void aplicarTamanhoFonte(int fontSize, int rowIndex, int columnIndex, int startRowIndex,
            int startColumnIndex, int endRowIndex, int endColumnIndex, boolean isRange) {

        if (isRange) {
            for (int rowIdx = startRowIndex; rowIdx <= endRowIndex; rowIdx++) {
                Row row = sheet.getRow(rowIdx);
                if (row == null)
                    continue;
                for (int colIdx = startColumnIndex; colIdx <= endColumnIndex; colIdx++) {
                    Cell cell = row.getCell(colIdx);
                    if (cell == null)
                        continue;
                    applyFontSizeToCell(cell, fontSize);
                }
            }
        } else if (rowIndex != -1) {
            if (columnIndex == -1) {
                // Aplicar à linha inteira
                Row row = sheet.getRow(rowIndex);
                if (row != null) {
                    for (Cell cell : row) {
                        if (cell != null) {
                            applyFontSizeToCell(cell, fontSize);
                        }
                    }
                }
            } else {
                // Aplicar à célula específica
                Row row = sheet.getRow(rowIndex);
                if (row != null) {
                    Cell cell = row.getCell(columnIndex);
                    if (cell != null) {
                        applyFontSizeToCell(cell, fontSize);
                    }
                }
            }
        }
    }

    private void applyFontSizeToCell(Cell cell, int fontSize) {
        // Obter o estilo atual da célula
        CellStyle currentStyle = cell.getCellStyle();

        // Clonar o estilo atual
        CellStyle newStyle = workbook.createCellStyle();
        newStyle.cloneStyleFrom(currentStyle);

        // Obter a fonte atual
        Font currentFont = workbook.getFontAt(currentStyle.getFontIndex());

        // Criar nova fonte com as alterações
        Font newFont = workbook.createFont();
        newFont.setFontName(currentFont.getFontName());
        newFont.setFontHeightInPoints((short) fontSize);
        newFont.setBold(currentFont.getBold());
        newFont.setItalic(currentFont.getItalic());
        newFont.setUnderline(currentFont.getUnderline());
        newFont.setColor(currentFont.getColor());
        newFont.setTypeOffset(currentFont.getTypeOffset());
        newFont.setStrikeout(currentFont.getStrikeout());
        newFont.setCharSet(currentFont.getCharSet());

        // Associar a nova fonte ao novo estilo
        newStyle.setFont(newFont);

        // Aplicar o novo estilo à célula
        cell.setCellStyle(newStyle);
    }
}
