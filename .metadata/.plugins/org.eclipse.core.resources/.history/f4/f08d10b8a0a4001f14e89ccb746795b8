package com.abnote.planilhas.impl;

import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.*;

import com.abnote.planilhas.estilos.EstiloCelula;
import com.abnote.planilhas.interfaces.IPlanilha;
import com.abnote.planilhas.utils.*;
import com.abnote.planilhas.calculos.Calculos;
import com.abnote.planilhas.calculos.Conversores;

public abstract class PlanilhaBase implements IPlanilha {
    protected Workbook workbook;
    protected Sheet sheet;
    private final PositionManager positionManager = new PositionManager();
    private DataInserter dataInserter;
    private String diretorioSaida = "C:\\opt\\tmp\\testePlanilhaSaidas";

    private int lastInsertedRowIndex = -1;
    private int lastInsertedColIndex = -1;

    protected abstract void inicializarWorkbook();

    @Override
    public void criarPlanilha(String nomeSheet) {
        inicializarWorkbook();
        sheet = workbook.createSheet(nomeSheet);
        dataInserter = new DataInserter(sheet, positionManager);
        positionManager.resetarPosicao();
    }

    @Override
    public void criarSheet(String nomeSheet) {
        if (workbook.getSheet(nomeSheet) != null) {
            throw new IllegalArgumentException("A aba '" + nomeSheet + "' já existe!");
        }
        sheet = workbook.createSheet(nomeSheet);
        dataInserter = new DataInserter(sheet, positionManager);
        positionManager.resetarPosicao();
    }

    @Override
    public void SELECIONAR_SHEET(String nomeSheet) {
        try {
            if (workbook == null) {
                throw new IllegalStateException("Workbook ainda não foi inicializado!");
            }

            sheet = workbook.getSheet(nomeSheet);

            if (sheet == null) {
                throw new IllegalArgumentException("A aba '" + nomeSheet + "' não foi encontrada.");
            }

            dataInserter = new DataInserter(sheet, positionManager);
            positionManager.resetarPosicao();

        } catch (IllegalArgumentException e) {
            System.err.println(
                    "Erro: A aba '" + nomeSheet + "' não foi criada. Verifique a chamada do método criarSheet().");
            throw e;
        }
    }

    @Override
    public IPlanilha naCelula(String posicao) {
        positionManager.naCelula(posicao);
        return this;
    }

    @Override
    public IPlanilha noIntervalo(String posicaoInicial, String posicaoFinal) {
        positionManager.noIntervalo(posicaoInicial, posicaoFinal);
        return this;
    }

    @Override
    public IPlanilha inserirDados(String valor) {
        dataInserter.inserirDados(valor);
        lastInsertedRowIndex = dataInserter.getLastInsertedRowIndex();
        lastInsertedColIndex = dataInserter.getLastInsertedColIndex();
        return this;
    }

    @Override
    public IPlanilha inserirDados(Object dados, String delimitador) {
        dataInserter.inserirDados(dados, delimitador);
        lastInsertedRowIndex = dataInserter.getLastInsertedRowIndex();
        lastInsertedColIndex = dataInserter.getLastInsertedColIndex();
        return this;
    }

    @Override
    public IPlanilha inserirDados(java.util.List<String> dados) {
        dataInserter.inserirDados(dados);
        lastInsertedRowIndex = dataInserter.getLastInsertedRowIndex();
        lastInsertedColIndex = dataInserter.getLastInsertedColIndex();
        return this;
    }

    @Override
    public IPlanilha inserirDados(java.util.List<String> dados, String delimitador) {
        dataInserter.inserirDados(dados, delimitador);
        lastInsertedRowIndex = dataInserter.getLastInsertedRowIndex();
        lastInsertedColIndex = dataInserter.getLastInsertedColIndex();
        return this;
    }

    @Override
    public IPlanilha inserirDadosArquivo(String caminhoArquivo, String delimitador) {
        dataInserter.inserirDadosArquivo(caminhoArquivo, delimitador);
        lastInsertedRowIndex = dataInserter.getLastInsertedRowIndex();
        lastInsertedColIndex = dataInserter.getLastInsertedColIndex();
        return this;
    }

    @Override
    public EstiloCelula aplicarEstilos() {
        if (positionManager.isIntervaloDefinida()) {
            EstiloCelula estilo = new EstiloCelula(workbook, sheet, positionManager.getPosicaoInicialLinha(),
                    positionManager.getPosicaoInicialColuna(), positionManager.getPosicaoFinalLinha(),
                    positionManager.getPosicaoFinalColuna());
            positionManager.resetarPosicao();
            return estilo;
        }

        if (lastInsertedRowIndex == -1) {
            return new EstiloCelula(workbook, sheet, -1, -1);
        }

        return new EstiloCelula(workbook, sheet, lastInsertedRowIndex, -1);
    }

    @Override
    public EstiloCelula aplicarEstilosEmCelula() {
        if (lastInsertedRowIndex == -1 || lastInsertedColIndex == -1) {
            return new EstiloCelula(workbook, sheet, -1, -1);
        }
        return new EstiloCelula(workbook, sheet, lastInsertedRowIndex, lastInsertedColIndex);
    }

    @Override
    public IPlanilha converterEmNumero(String posicaoInicial) {
        Conversores.converterEmNumero(sheet, posicaoInicial);
        return this;
    }

    @Override
    public IPlanilha converterEmContabil(String posicaoInicial) {
        Conversores.converterEmContabil(sheet, posicaoInicial, workbook);
        return this;
    }

    @Override
    public IPlanilha somarColuna(String posicaoInicial) {
        Calculos.somarColuna(sheet, posicaoInicial);
        String colunaLetra = posicaoInicial.replaceAll("[0-9]", "");
        this.ultimaLinha(colunaLetra);
        this.lastInsertedColIndex = -1;
        return this;
    }

    @Override
    public IPlanilha somarColunaComTexto(String posicaoInicial, String texto) {
        Calculos.somarColunaComTexto(sheet, posicaoInicial, texto);
        String colunaLetra = posicaoInicial.replaceAll("[0-9]", "");
        this.ultimaLinha(colunaLetra);
        this.lastInsertedColIndex = -1;
        return this;
    }

    @Override
    public EstiloCelula centralizarTudo() {
        return aplicarEstilos().centralizarTudo();
    }

    @Override
    public EstiloCelula redimensionarColunas() {
        return aplicarEstilos().redimensionarColunas();
    }

    @Override
    public EstiloCelula removerLinhasDeGrade() {
        return aplicarEstilos().removerLinhasDeGrade();
    }

    @Override
    public Workbook obterWorkbook() {
        return workbook;
    }

    @Override
    public void salvar(String nomeArquivo) throws IOException {
        try (FileOutputStream arquivoSaida = new FileOutputStream(nomeArquivo)) {
            workbook.write(arquivoSaida);
            System.out.println("Planilha criada com sucesso em: " + nomeArquivo);
        }
    }

    @Override
    public void setDiretorioSaida(String diretorioSaida) {
        this.diretorioSaida = diretorioSaida;
    }

    @Override
    public String getDiretorioSaida() {
        return diretorioSaida;
    }

    @Override
    public IPlanilha ultimaLinha(String coluna) {
        int[] posicao = PosicaoConverter.converterPosicao(coluna + "1");
        int colunaIndex = posicao[0];

        int ultimaLinha = -1;
        for (int i = 0; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(colunaIndex);
                if (cell != null && cell.getCellTypeEnum() != CellType.BLANK) {
                    ultimaLinha = i;
                }
            }
        }

        if (ultimaLinha >= 0) {
            this.lastInsertedRowIndex = ultimaLinha;
        } else {
            this.lastInsertedRowIndex = sheet.getLastRowNum();
        }

        return this;
    }
}
