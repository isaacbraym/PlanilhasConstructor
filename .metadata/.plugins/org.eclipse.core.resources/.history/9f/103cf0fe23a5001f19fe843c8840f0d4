package com.abnote.planilhas.estilos;

import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;

import com.abnote.planilhas.estilos.estilos.BoldStyle;
import com.abnote.planilhas.estilos.estilos.BorderStyleHelper;
import com.abnote.planilhas.estilos.estilos.CenterStyle;
import com.abnote.planilhas.estilos.estilos.CorFonteEnum;
import com.abnote.planilhas.estilos.estilos.Fontes;
import com.abnote.planilhas.estilos.estilos.FonteEnum;

public class EstiloCelula {
	private final Workbook workbook;
	private final Sheet sheet;
	private final int rowIndex;
	private final int columnIndex;

	private final int startRowIndex;
	private final int startColumnIndex;
	private final int endRowIndex;
	private final int endColumnIndex;
	private final boolean isRange;

	private final Map<String, CellStyle> styleCache = new HashMap<>();

	// New fields to hold the shared CellStyle and Font
	private CellStyle cellStyle;
	private Font font;

	public EstiloCelula(Workbook workbook, Sheet sheet) {
		this(workbook, sheet, -1, -1, -1, -1);
		this.isRange = true;
		this.startRowIndex = 0;
		this.startColumnIndex = 0;
		this.endRowIndex = sheet.getLastRowNum();

		int maxColIndex = -1;
		for (int rowIdx = startRowIndex; rowIdx <= endRowIndex; rowIdx++) {
			Row row = sheet.getRow(rowIdx);
			if (row != null && row.getLastCellNum() > maxColIndex) {
				maxColIndex = row.getLastCellNum();
			}
		}
		this.endColumnIndex = maxColIndex - 1; // Adjust for zero-based index
	}

	public EstiloCelula(Workbook workbook, Sheet sheet, int rowIndex, int columnIndex) {
		this(workbook, sheet, rowIndex, columnIndex, rowIndex, columnIndex);
		this.isRange = false;
	}

	public EstiloCelula(Workbook workbook, Sheet sheet, int startRowIndex, int startColumnIndex, int endRowIndex,
			int endColumnIndex) {
		this.workbook = workbook;
		this.sheet = sheet;
		this.rowIndex = startRowIndex;
		this.columnIndex = startColumnIndex;
		this.startRowIndex = startRowIndex >= 0 ? startRowIndex : 0;
		this.startColumnIndex = startColumnIndex >= 0 ? startColumnIndex : 0;
		this.endRowIndex = endRowIndex >= 0 ? endRowIndex : startRowIndex;
		this.endColumnIndex = endColumnIndex >= 0 ? endColumnIndex : startColumnIndex;
		this.isRange = (endRowIndex != -1 && endColumnIndex != -1);
	}

	// Method to initialize CellStyle and Font
	private void initializeStyleAndFont() {
		if (cellStyle == null) {
			cellStyle = workbook.createCellStyle();
		}
		if (font == null) {
			font = workbook.createFont();
		}
	}

	// Methods to apply styles

	public EstiloCelula aplicarBold() {
		initializeStyleAndFont();
		font.setBold(true);
		cellStyle.setFont(font);
		applyCellStyleToCells();
		return this;
	}

	public EstiloCelula fonte(String fontName) {
		initializeStyleAndFont();
		font.setFontName(fontName);
		cellStyle.setFont(font);
		applyCellStyleToCells();
		return this;
	}

	public EstiloCelula fonte(FonteEnum fonteEnum) {
		return fonte(fonteEnum.getFontName());
	}

	public EstiloCelula fonteTamanho(int fontSize) {
		initializeStyleAndFont();
		font.setFontHeightInPoints((short) fontSize);
		cellStyle.setFont(font);
		applyCellStyleToCells();
		return this;
	}

	public EstiloCelula corFonte(CorFonteEnum corEnum) {
		initializeStyleAndFont();
		font.setColor(getColorIndex(corEnum));
		cellStyle.setFont(font);
		applyCellStyleToCells();
		return this;
	}

	public EstiloCelula corFonte(String hexColor) {
		initializeStyleAndFont();
		java.awt.Color awtColor = java.awt.Color.decode(hexColor);
		XSSFColor xssfColor = new XSSFColor(awtColor, null);
		((XSSFFont) font).setColor(xssfColor);
		cellStyle.setFont(font);
		applyCellStyleToCells();
		return this;
	}

	public EstiloCelula corFonte(int red, int green, int blue) {
		initializeStyleAndFont();
		java.awt.Color awtColor = new java.awt.Color(red, green, blue);
		XSSFColor xssfColor = new XSSFColor(awtColor, null);
		((XSSFFont) font).setColor(xssfColor);
		cellStyle.setFont(font);
		applyCellStyleToCells();
		return this;
	}

	// Helper method to get color index
	private short getColorIndex(CorFonteEnum corEnum) {
		// Map CorFonteEnum to IndexedColors
		switch (corEnum) {
		case PRETO:
			return IndexedColors.BLACK.getIndex();
		case VERMELHO:
			return IndexedColors.RED.getIndex();
		case VERDE:
			return IndexedColors.GREEN.getIndex();
		case AZUL:
			return IndexedColors.BLUE.getIndex();
		case AMARELO:
			return IndexedColors.YELLOW.getIndex();
		// Add other cases as needed
		default:
			return IndexedColors.BLACK.getIndex();
		}
	}

	// Method to apply the CellStyle to cells
	private void applyCellStyleToCells() {
		if (isRange) {
			for (int rowIdx = startRowIndex; rowIdx <= endRowIndex; rowIdx++) {
				Row row = sheet.getRow(rowIdx);
				if (row == null)
					continue;
				for (int colIdx = startColumnIndex; colIdx <= endColumnIndex; colIdx++) {
					Cell cell = row.getCell(colIdx);
					if (cell == null)
						continue;
					cell.setCellStyle(cellStyle);
				}
			}
		} else if (rowIndex != -1) {
			if (columnIndex == -1) {
				// Apply to entire row
				Row row = sheet.getRow(rowIndex);
				if (row != null) {
					for (Cell cell : row) {
						if (cell != null) {
							cell.setCellStyle(cellStyle);
						}
					}
				}
			} else {
				// Apply to specific cell
				Row row = sheet.getRow(rowIndex);
				if (row != null) {
					Cell cell = row.getCell(columnIndex);
					if (cell != null) {
						cell.setCellStyle(cellStyle);
					}
				}
			}
		}
	}

	// Other methods (e.g., applying borders, centering, etc.) remain unchanged

	// Getters for use in helper classes
	public Workbook getWorkbook() {
		return workbook;
	}

	public Sheet getSheet() {
		return sheet;
	}

	public int getRowIndex() {
		return rowIndex;
	}

	public int getColumnIndex() {
		return columnIndex;
	}

	public int getStartRowIndex() {
		return startRowIndex;
	}

	public int getStartColumnIndex() {
		return startColumnIndex;
	}

	public int getEndRowIndex() {
		return endRowIndex;
	}

	public int getEndColumnIndex() {
		return endColumnIndex;
	}

	public boolean isRange() {
		return isRange;
	}

	public Map<String, CellStyle> getStyleCache() {
		return styleCache;
	}
}
