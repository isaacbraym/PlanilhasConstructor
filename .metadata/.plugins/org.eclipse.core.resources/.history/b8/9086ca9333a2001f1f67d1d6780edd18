import org.apache.poi.ss.usermodel.*;
import java.util.HashMap;
import java.util.Map;

public class EstiloCelula {
    private final Workbook workbook;
    private final Sheet sheet;
    private final int rowIndex; // Índice da linha a ser estilizada (-1 se for geral)
    private final Map<String, CellStyle> styleCache = new HashMap<>();

    private final CellStyle boldStyle;
    private final CellStyle borderStyle;
    private final CellStyle centeredStyle;
    private final int startRowIndex;
    private final int endRowIndex;

    // Construtores
    public EstiloCelula(Workbook workbook, Sheet sheet) {
        this(workbook, sheet, -1, -1); // -1 indica que não está vinculado a um intervalo específico
    }

    public EstiloCelula(Workbook workbook, Sheet sheet, int rowIndex) {
        this.workbook = workbook;
        this.sheet = sheet;
        this.rowIndex = rowIndex;

        // Inicializa o estilo negrito
        Font font = workbook.createFont();
        font.setBold(true);
        boldStyle = workbook.createCellStyle();
        boldStyle.setFont(font);

        // Inicializa o estilo centralizado
        centeredStyle = workbook.createCellStyle();
        centeredStyle.setAlignment(HorizontalAlignment.CENTER);
        centeredStyle.setVerticalAlignment(VerticalAlignment.CENTER);

        // Inicializa o estilo de borda com todas as bordas finas
        borderStyle = workbook.createCellStyle();
        borderStyle.setBorderTop(BorderStyle.THIN);
        borderStyle.setBorderBottom(BorderStyle.THIN);
        borderStyle.setBorderLeft(BorderStyle.THIN);
        borderStyle.setBorderRight(BorderStyle.THIN);
    }

    // ... Outros métodos existentes ...

    /**
     * Aplica bordas a uma célula específica.
     * @param posicao Posição da célula no formato "A1".
     * @return A própria instância de EstiloCelula para encadeamento.
     */
    public EstiloCelula aplicarBordaNaCelula(String posicao) {
        int[] posicaoIndices = converterPosicao(posicao);
        int coluna = posicaoIndices[0];
        int linha = posicaoIndices[1];
        Row row = sheet.getRow(linha);
        if (row == null) {
            row = sheet.createRow(linha);
        }
        Cell cell = row.getCell(coluna);
        if (cell == null) {
            cell = row.createCell(coluna);
        }
        // Preservar estilos existentes
        CellStyle originalStyle = cell.getCellStyle();
        CellStyle newStyle = workbook.createCellStyle();
        newStyle.cloneStyleFrom(originalStyle);
        newStyle.setBorderTop(BorderStyle.THIN);
        newStyle.setBorderBottom(BorderStyle.THIN);
        newStyle.setBorderLeft(BorderStyle.THIN);
        newStyle.setBorderRight(BorderStyle.THIN);
        cell.setCellStyle(newStyle);
        return this;
    }

    /**
     * Cria ou recupera um CellStyle combinado a partir de uma chave única.
     * Por exemplo, "bold_centered" combina negrito e centralização.
     */
    private CellStyle getCombinedStyle(String key) {
        if (styleCache.containsKey(key)) {
            return styleCache.get(key);
        }

        CellStyle combinedStyle = workbook.createCellStyle();

        switch (key) {
            case "bold_centered":
                combinedStyle.cloneStyleFrom(boldStyle);
                combinedStyle.setAlignment(HorizontalAlignment.CENTER);
                combinedStyle.setVerticalAlignment(VerticalAlignment.CENTER);
                break;
            // Adicione mais combinações conforme necessário
            default:
                combinedStyle = workbook.createCellStyle(); // Estilo padrão vazio
        }

        styleCache.put(key, combinedStyle);
        return combinedStyle;
    }

    /**
     * Aplica centralização e redimensionamento a todas as células da planilha.
     * Garante que estilos existentes, como bold, não sejam removidos.
     */
    public EstiloCelula centralizarERedimensionarTudo() {
        // Centralização
        for (Row row : sheet) {
            for (Cell cell : row) {
                if (cell != null) {
                    CellStyle originalStyle = cell.getCellStyle();
                    CellStyle newStyle = workbook.createCellStyle();
                    newStyle.cloneStyleFrom(originalStyle);
                    newStyle.setAlignment(HorizontalAlignment.CENTER);
                    newStyle.setVerticalAlignment(VerticalAlignment.CENTER);
                    cell.setCellStyle(newStyle);
                }
            }
        }

        // Redimensionamento das colunas
        redimensionarColunas();

        return this;
    }

    /**
     * Aplica centralização e negrito a todas as células da linha vinculada.
     */
    public EstiloCelula centralizarBold() {
        if (rowIndex == -1) return this; // Nenhuma linha específica para estilizar
        CellStyle combinedStyle = getCombinedStyle("bold_centered");
        Row row = sheet.getRow(rowIndex);
        if (row == null) return this;
        for (Cell cell : row) {
            if (cell != null) {
                cell.setCellStyle(combinedStyle);
            }
        }
        redimensionarColunas();
        return this;
    }

    /**
     * Aplica negrito à última célula preenchida na coluna especificada.
     */
    public EstiloCelula aplicarBoldUltimaLinha(String posicaoInicial) {
        int[] posicao = converterPosicao(posicaoInicial);
        int coluna = posicao[0];
        int ultimaLinha = -1;
        for (int i = posicao[1]; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(coluna);
                if (cell != null && cell.getCellTypeEnum() != CellType.BLANK) {
                    ultimaLinha = i;
                }
            }
        }
        if (ultimaLinha >= 0) {
            Row row = sheet.getRow(ultimaLinha);
            Cell cell = row.getCell(coluna);
            if (cell == null) {
                cell = row.createCell(coluna);
            }
            cell.setCellStyle(boldStyle);
        }
        return this;
    }

    /**
     * Aplica bordas a um intervalo de células.
     */
    public EstiloCelula aplicarTodasAsBordas(String posicaoInicial, String posicaoFinal) {
        int[] inicio = converterPosicao(posicaoInicial);
        int[] fim = converterPosicao(posicaoFinal);

        for (int rowIdx = inicio[1]; rowIdx <= fim[1]; rowIdx++) {
            Row row = sheet.getRow(rowIdx);
            if (row == null) {
                row = sheet.createRow(rowIdx);
            }
            for (int colIdx = inicio[0]; colIdx <= fim[0]; colIdx++) {
                Cell cell = row.getCell(colIdx);
                if (cell == null) {
                    cell = row.createCell(colIdx);
                }
                cell.setCellStyle(borderStyle);
            }
        }
        return this;
    }

    /**
     * Centraliza todas as células da planilha.
     */
    public EstiloCelula centralizarTudo() {
        for (Row row : sheet) {
            for (Cell cell : row) {
                if (cell != null) {
                    cell.setCellStyle(centeredStyle);
                }
            }
        }
        redimensionarColunas();
        return this;
    }

    /**
     * Redimensiona todas as colunas para ajustar ao conteúdo.
     */
    public EstiloCelula redimensionarColunas() {
        int maxColumns = getMaxNumberOfColumns();
        for (int i = 0; i < maxColumns; i++) {
            sheet.autoSizeColumn(i);
        }
        return this;
    }

    /**
     * Determina o número máximo de colunas presentes em todas as linhas da planilha.
     * @return Número máximo de colunas.
     */
    private int getMaxNumberOfColumns() {
        int maxColumns = 0;
        for (Row row : sheet) {
            if (row.getLastCellNum() > maxColumns) {
                maxColumns = row.getLastCellNum();
            }
        }
        return maxColumns;
    }
    
    public EstiloCelula aplicarTodasAsBordas() {
        if (rowIndex == -1) return this; // Nenhuma linha específica para estilizar
        Row row = sheet.getRow(rowIndex);
        if (row == null) return this;

        for (Cell cell : row) {
            if (cell == null) {
                cell = row.createCell(cell.getColumnIndex());
            }
            // Preservar estilos existentes clonando o estilo atual
            CellStyle originalStyle = cell.getCellStyle();
            CellStyle newStyle = workbook.createCellStyle();
            newStyle.cloneStyleFrom(originalStyle);
            
            // Aplicar as bordas sem alterar outros estilos
            newStyle.setBorderTop(BorderStyle.THIN);
            newStyle.setBorderBottom(BorderStyle.THIN);
            newStyle.setBorderLeft(BorderStyle.THIN);
            newStyle.setBorderRight(BorderStyle.THIN);
            
            cell.setCellStyle(newStyle);
        }
        return this;
    }


    /**
     * Remove as linhas de grade da planilha.
     */
    public EstiloCelula removerLinhasDeGrade() {
        sheet.setDisplayGridlines(false);
        return this;
    }

    /**
     * Converte uma posição no formato "A1" para índices de coluna e linha.
     */
    private int[] converterPosicao(String posicao) {
        int coluna = 0;
        int linha = 0;
        for (int i = 0; i < posicao.length(); i++) {
            char ch = posicao.charAt(i);
            if (Character.isLetter(ch)) {
                coluna = coluna * 26 + (Character.toUpperCase(ch) - 'A' + 1);
            } else if (Character.isDigit(ch)) {
                linha = Integer.parseInt(posicao.substring(i)) - 1;
                break;
            }
        }
        return new int[] { coluna - 1, linha };
    }

    // Métodos para aplicar estilo em linha ou coluna
    public EstiloCelula inserirEmLinha(String posicaoInicial, String posicaoFinal) {
        int[] inicio = converterPosicao(posicaoInicial);
        int[] fim = converterPosicao(posicaoFinal);

        Row row = sheet.getRow(inicio[1]);
        if (row == null) {
            row = sheet.createRow(inicio[1]);
        }

        for (int col = inicio[0]; col <= fim[0]; col++) {
            Cell cell = row.getCell(col);
            if (cell == null) {
                cell = row.createCell(col);
            }
            cell.setCellStyle(boldStyle);
        }
        return this;
    }

    public EstiloCelula inserirEmColuna(String posicaoInicial, String posicaoFinal) {
        int[] inicio = converterPosicao(posicaoInicial);
        int[] fim = converterPosicao(posicaoFinal);

        for (int rowIdx = inicio[1]; rowIdx <= fim[1]; rowIdx++) {
            Row row = sheet.getRow(rowIdx);
            if (row == null) {
                row = sheet.createRow(rowIdx);
            }
            Cell cell = row.getCell(inicio[0]);
            if (cell == null) {
                cell = row.createCell(inicio[0]);
            }
            cell.setCellStyle(boldStyle);
        }
        return this;
    }
}
