package com.abnote.planilhas.estilos;

import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import com.abnote.planilhas.estilos.estilos.BoldStyle;
import com.abnote.planilhas.estilos.estilos.BorderStyleHelper;
import com.abnote.planilhas.estilos.estilos.CenterStyle;
import com.abnote.planilhas.estilos.estilos.Fontes;

public class EstiloCelula {
	private final Workbook workbook;
	private final Sheet sheet;
	private final int rowIndex;
	private final int columnIndex;

	// Campos para intervalos
	private final int startRowIndex;
	private final int startColumnIndex;
	private final int endRowIndex;
	private final int endColumnIndex;
	private final boolean isRange;
	private final boolean isEntireSheet; // Nova flag
	// Cache de estilos
	private final Map<String, org.apache.poi.ss.usermodel.CellStyle> styleCache = new HashMap<>();

	  // Construtor para toda a planilha
    public EstiloCelula(Workbook workbook, Sheet sheet, boolean isEntireSheet) {
        this.workbook = workbook;
        this.sheet = sheet;
        this.rowIndex = -1;
        this.columnIndex = -1;
        this.startRowIndex = -1;
        this.startColumnIndex = -1;
        this.endRowIndex = -1;
        this.endColumnIndex = -1;
        this.isRange = false;
        this.isEntireSheet = isEntireSheet;
    }

    // Construtores existentes
    public EstiloCelula(Workbook workbook, Sheet sheet) {
        this(workbook, sheet, -1, -1, -1, -1, false);
    }

    public EstiloCelula(Workbook workbook, Sheet sheet, int rowIndex, int columnIndex) {
        this(workbook, sheet, rowIndex, columnIndex, -1, -1, false);
    }

    public EstiloCelula(Workbook workbook, Sheet sheet, int startRowIndex, int startColumnIndex, int endRowIndex,
            int endColumnIndex) {
        this(workbook, sheet, startRowIndex, startColumnIndex, endRowIndex, endColumnIndex, true);
    }

    private EstiloCelula(Workbook workbook, Sheet sheet, int startRowIndex, int startColumnIndex, int endRowIndex,
            int endColumnIndex, boolean isRange) {
        this.workbook = workbook;
        this.sheet = sheet;
        this.rowIndex = startRowIndex;
        this.columnIndex = startColumnIndex;
        this.startRowIndex = startRowIndex;
        this.startColumnIndex = startColumnIndex;
        this.endRowIndex = endRowIndex;
        this.endColumnIndex = endColumnIndex;
        this.isRange = isRange;
        this.isEntireSheet = false;
    }

    // MÃ©todos para aplicar estilos

    public EstiloCelula aplicarBold() {
        BoldStyle boldStyle = new BoldStyle(workbook, sheet, styleCache);
        boldStyle.aplicarBold(rowIndex, columnIndex, startRowIndex, startColumnIndex, endRowIndex, endColumnIndex,
                isRange, isEntireSheet);
        return this;
    }

	public EstiloCelula todasAsBordasEmTudo() {
		BorderStyleHelper borderStyleHelper = new BorderStyleHelper(workbook, sheet, styleCache);
		borderStyleHelper.todasAsBordasEmTudo(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex, isRange);
		return this;
	}

	public EstiloCelula aplicarBordasNaCelula(String posicao) {
		BorderStyleHelper borderStyleHelper = new BorderStyleHelper(workbook, sheet, styleCache);
		borderStyleHelper.aplicarBordasNaCelula(posicao);
		return this;
	}

	public EstiloCelula aplicarTodasAsBordasDeAte(String posicaoInicial, String posicaoFinal) {
		BorderStyleHelper borderStyleHelper = new BorderStyleHelper(workbook, sheet, styleCache);
		borderStyleHelper.aplicarTodasAsBordasDeAte(posicaoInicial, posicaoFinal);
		return this;
	}

	public EstiloCelula bordasEspessas(String posicaoInicial, String posicaoFinal) {
		BorderStyleHelper borderStyleHelper = new BorderStyleHelper(workbook, sheet, styleCache);
		borderStyleHelper.bordasEspessas(posicaoInicial, posicaoFinal);
		return this;
	}

	public EstiloCelula bordasEspessasComBordasInternas(String posicaoInicial, String posicaoFinal) {
		BorderStyleHelper borderStyleHelper = new BorderStyleHelper(workbook, sheet, styleCache);
		borderStyleHelper.bordasEspessasComBordasInternas(posicaoInicial, posicaoFinal);
		return this;
	}

	public EstiloCelula centralizarTudo() {
		CenterStyle centerStyle = new CenterStyle(workbook, sheet, styleCache);
		centerStyle.centralizarTudo(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex, isRange);
		return this;
	}

	public EstiloCelula centralizarERedimensionarTudo() {
		CenterStyle centerStyle = new CenterStyle(workbook, sheet, styleCache);
		centerStyle.centralizarERedimensionarTudo();
		return this;
	}

	public EstiloCelula redimensionarColunas() {
		CenterStyle centerStyle = new CenterStyle(workbook, sheet, styleCache);
		centerStyle.redimensionarColunas();
		return this;
	}

	public EstiloCelula removerLinhasDeGrade() {
		sheet.setDisplayGridlines(false);
		return this;
	}

    public EstiloCelula fonte(String fontName) {
        Fontes fontes = new Fontes(workbook, sheet, styleCache);
        fontes.aplicarFonte(fontName, rowIndex, columnIndex, startRowIndex, startColumnIndex, endRowIndex, endColumnIndex,
                isRange, isEntireSheet);
        return this;
    }
    public EstiloCelula fonteTamanho(int fontSize) {
        Fontes fontes = new Fontes(workbook, sheet, styleCache);
        fontes.aplicarTamanhoFonte(fontSize, rowIndex, columnIndex, startRowIndex, startColumnIndex, endRowIndex,
                endColumnIndex, isRange, isEntireSheet);
        return this;
    }


	// Getters para uso nas classes auxiliares
	public Workbook getWorkbook() {
		return workbook;
	}
    public boolean isEntireSheet() {
        return isEntireSheet;
    }

	public Sheet getSheet() {
		return sheet;
	}

	public int getRowIndex() {
		return rowIndex;
	}

	public int getColumnIndex() {
		return columnIndex;
	}

	public int getStartRowIndex() {
		return startRowIndex;
	}

	public int getStartColumnIndex() {
		return startColumnIndex;
	}

	public int getEndRowIndex() {
		return endRowIndex;
	}

	public int getEndColumnIndex() {
		return endColumnIndex;
	}

	public boolean isRange() {
		return isRange;
	}

	public Map<String, org.apache.poi.ss.usermodel.CellStyle> getStyleCache() {
		return styleCache;
	}
}
